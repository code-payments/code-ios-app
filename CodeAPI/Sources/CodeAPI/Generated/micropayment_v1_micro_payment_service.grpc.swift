//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: micropayment/v1/micro_payment_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// todo: Migrate this to a generic "request" service
///
/// Usage: instantiate `Code_Micropayment_V1_MicroPaymentClient`, then call methods of this protocol to make API calls.
public protocol Code_Micropayment_V1_MicroPaymentClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? { get }

  func getStatus(
    _ request: Code_Micropayment_V1_GetStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Micropayment_V1_GetStatusRequest, Code_Micropayment_V1_GetStatusResponse>

  func registerWebhook(
    _ request: Code_Micropayment_V1_RegisterWebhookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Micropayment_V1_RegisterWebhookRequest, Code_Micropayment_V1_RegisterWebhookResponse>

  func codify(
    _ request: Code_Micropayment_V1_CodifyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Micropayment_V1_CodifyRequest, Code_Micropayment_V1_CodifyResponse>

  func getPathMetadata(
    _ request: Code_Micropayment_V1_GetPathMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Micropayment_V1_GetPathMetadataRequest, Code_Micropayment_V1_GetPathMetadataResponse>
}

extension Code_Micropayment_V1_MicroPaymentClientProtocol {
  public var serviceName: String {
    return "code.micropayment.v1.MicroPayment"
  }

  /// GetStatus gets basic request status
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStatus(
    _ request: Code_Micropayment_V1_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Micropayment_V1_GetStatusRequest, Code_Micropayment_V1_GetStatusResponse> {
    return self.makeUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  /// RegisterWebhook registers a webhook for a request
  ///
  /// todo: Once Kik codes can encode the entire payment request details, we can
  ///       remove the messaging service component and have a Create RPC that
  ///       reserves the intent ID with payment details, plus registers the webhook
  ///       at the same time. Until that's possible, we're stuck with two RPC calls.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterWebhook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerWebhook(
    _ request: Code_Micropayment_V1_RegisterWebhookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Micropayment_V1_RegisterWebhookRequest, Code_Micropayment_V1_RegisterWebhookResponse> {
    return self.makeUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.registerWebhook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterWebhookInterceptors() ?? []
    )
  }

  /// Codify adds a trial micro paywall to any URL
  ///
  /// - Parameters:
  ///   - request: Request to send to Codify.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func codify(
    _ request: Code_Micropayment_V1_CodifyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Micropayment_V1_CodifyRequest, Code_Micropayment_V1_CodifyResponse> {
    return self.makeUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.codify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodifyInterceptors() ?? []
    )
  }

  /// GetPathMetadata gets codified website metadata for a given path
  ///
  /// Important Note: This RPC's current implementation is insecure and
  /// it's sole design is to enable PoC and trials.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPathMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPathMetadata(
    _ request: Code_Micropayment_V1_GetPathMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Micropayment_V1_GetPathMetadataRequest, Code_Micropayment_V1_GetPathMetadataResponse> {
    return self.makeUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getPathMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPathMetadataInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Code_Micropayment_V1_MicroPaymentClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Code_Micropayment_V1_MicroPaymentNIOClient")
public final class Code_Micropayment_V1_MicroPaymentClient: Code_Micropayment_V1_MicroPaymentClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.micropayment.v1.MicroPayment service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Micropayment_V1_MicroPaymentNIOClient: Code_Micropayment_V1_MicroPaymentClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol?

  /// Creates a client for the code.micropayment.v1.MicroPayment service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// todo: Migrate this to a generic "request" service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Micropayment_V1_MicroPaymentAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? { get }

  func makeGetStatusCall(
    _ request: Code_Micropayment_V1_GetStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_GetStatusRequest, Code_Micropayment_V1_GetStatusResponse>

  func makeRegisterWebhookCall(
    _ request: Code_Micropayment_V1_RegisterWebhookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_RegisterWebhookRequest, Code_Micropayment_V1_RegisterWebhookResponse>

  func makeCodifyCall(
    _ request: Code_Micropayment_V1_CodifyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_CodifyRequest, Code_Micropayment_V1_CodifyResponse>

  func makeGetPathMetadataCall(
    _ request: Code_Micropayment_V1_GetPathMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_GetPathMetadataRequest, Code_Micropayment_V1_GetPathMetadataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Micropayment_V1_MicroPaymentAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Micropayment_V1_MicroPaymentClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetStatusCall(
    _ request: Code_Micropayment_V1_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_GetStatusRequest, Code_Micropayment_V1_GetStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  public func makeRegisterWebhookCall(
    _ request: Code_Micropayment_V1_RegisterWebhookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_RegisterWebhookRequest, Code_Micropayment_V1_RegisterWebhookResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.registerWebhook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterWebhookInterceptors() ?? []
    )
  }

  public func makeCodifyCall(
    _ request: Code_Micropayment_V1_CodifyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_CodifyRequest, Code_Micropayment_V1_CodifyResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.codify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodifyInterceptors() ?? []
    )
  }

  public func makeGetPathMetadataCall(
    _ request: Code_Micropayment_V1_GetPathMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Micropayment_V1_GetPathMetadataRequest, Code_Micropayment_V1_GetPathMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getPathMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPathMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Micropayment_V1_MicroPaymentAsyncClientProtocol {
  public func getStatus(
    _ request: Code_Micropayment_V1_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Micropayment_V1_GetStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  public func registerWebhook(
    _ request: Code_Micropayment_V1_RegisterWebhookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Micropayment_V1_RegisterWebhookResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.registerWebhook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterWebhookInterceptors() ?? []
    )
  }

  public func codify(
    _ request: Code_Micropayment_V1_CodifyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Micropayment_V1_CodifyResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.codify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodifyInterceptors() ?? []
    )
  }

  public func getPathMetadata(
    _ request: Code_Micropayment_V1_GetPathMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Micropayment_V1_GetPathMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getPathMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPathMetadataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Micropayment_V1_MicroPaymentAsyncClient: Code_Micropayment_V1_MicroPaymentAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Code_Micropayment_V1_MicroPaymentClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getStatus'.
  func makeGetStatusInterceptors() -> [ClientInterceptor<Code_Micropayment_V1_GetStatusRequest, Code_Micropayment_V1_GetStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'registerWebhook'.
  func makeRegisterWebhookInterceptors() -> [ClientInterceptor<Code_Micropayment_V1_RegisterWebhookRequest, Code_Micropayment_V1_RegisterWebhookResponse>]

  /// - Returns: Interceptors to use when invoking 'codify'.
  func makeCodifyInterceptors() -> [ClientInterceptor<Code_Micropayment_V1_CodifyRequest, Code_Micropayment_V1_CodifyResponse>]

  /// - Returns: Interceptors to use when invoking 'getPathMetadata'.
  func makeGetPathMetadataInterceptors() -> [ClientInterceptor<Code_Micropayment_V1_GetPathMetadataRequest, Code_Micropayment_V1_GetPathMetadataResponse>]
}

public enum Code_Micropayment_V1_MicroPaymentClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MicroPayment",
    fullName: "code.micropayment.v1.MicroPayment",
    methods: [
      Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getStatus,
      Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.registerWebhook,
      Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.codify,
      Code_Micropayment_V1_MicroPaymentClientMetadata.Methods.getPathMetadata,
    ]
  )

  public enum Methods {
    public static let getStatus = GRPCMethodDescriptor(
      name: "GetStatus",
      path: "/code.micropayment.v1.MicroPayment/GetStatus",
      type: GRPCCallType.unary
    )

    public static let registerWebhook = GRPCMethodDescriptor(
      name: "RegisterWebhook",
      path: "/code.micropayment.v1.MicroPayment/RegisterWebhook",
      type: GRPCCallType.unary
    )

    public static let codify = GRPCMethodDescriptor(
      name: "Codify",
      path: "/code.micropayment.v1.MicroPayment/Codify",
      type: GRPCCallType.unary
    )

    public static let getPathMetadata = GRPCMethodDescriptor(
      name: "GetPathMetadata",
      path: "/code.micropayment.v1.MicroPayment/GetPathMetadata",
      type: GRPCCallType.unary
    )
  }
}

/// todo: Migrate this to a generic "request" service
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Micropayment_V1_MicroPaymentProvider: CallHandlerProvider {
  var interceptors: Code_Micropayment_V1_MicroPaymentServerInterceptorFactoryProtocol? { get }

  /// GetStatus gets basic request status
  func getStatus(request: Code_Micropayment_V1_GetStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Micropayment_V1_GetStatusResponse>

  /// RegisterWebhook registers a webhook for a request
  ///
  /// todo: Once Kik codes can encode the entire payment request details, we can
  ///       remove the messaging service component and have a Create RPC that
  ///       reserves the intent ID with payment details, plus registers the webhook
  ///       at the same time. Until that's possible, we're stuck with two RPC calls.
  func registerWebhook(request: Code_Micropayment_V1_RegisterWebhookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Micropayment_V1_RegisterWebhookResponse>

  /// Codify adds a trial micro paywall to any URL
  func codify(request: Code_Micropayment_V1_CodifyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Micropayment_V1_CodifyResponse>

  /// GetPathMetadata gets codified website metadata for a given path
  ///
  /// Important Note: This RPC's current implementation is insecure and
  /// it's sole design is to enable PoC and trials.
  func getPathMetadata(request: Code_Micropayment_V1_GetPathMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Micropayment_V1_GetPathMetadataResponse>
}

extension Code_Micropayment_V1_MicroPaymentProvider {
  public var serviceName: Substring {
    return Code_Micropayment_V1_MicroPaymentServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_GetStatusRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_GetStatusResponse>(),
        interceptors: self.interceptors?.makeGetStatusInterceptors() ?? [],
        userFunction: self.getStatus(request:context:)
      )

    case "RegisterWebhook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_RegisterWebhookRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_RegisterWebhookResponse>(),
        interceptors: self.interceptors?.makeRegisterWebhookInterceptors() ?? [],
        userFunction: self.registerWebhook(request:context:)
      )

    case "Codify":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_CodifyRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_CodifyResponse>(),
        interceptors: self.interceptors?.makeCodifyInterceptors() ?? [],
        userFunction: self.codify(request:context:)
      )

    case "GetPathMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_GetPathMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_GetPathMetadataResponse>(),
        interceptors: self.interceptors?.makeGetPathMetadataInterceptors() ?? [],
        userFunction: self.getPathMetadata(request:context:)
      )

    default:
      return nil
    }
  }
}

/// todo: Migrate this to a generic "request" service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Micropayment_V1_MicroPaymentAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Micropayment_V1_MicroPaymentServerInterceptorFactoryProtocol? { get }

  /// GetStatus gets basic request status
  func getStatus(
    request: Code_Micropayment_V1_GetStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Micropayment_V1_GetStatusResponse

  /// RegisterWebhook registers a webhook for a request
  ///
  /// todo: Once Kik codes can encode the entire payment request details, we can
  ///       remove the messaging service component and have a Create RPC that
  ///       reserves the intent ID with payment details, plus registers the webhook
  ///       at the same time. Until that's possible, we're stuck with two RPC calls.
  func registerWebhook(
    request: Code_Micropayment_V1_RegisterWebhookRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Micropayment_V1_RegisterWebhookResponse

  /// Codify adds a trial micro paywall to any URL
  func codify(
    request: Code_Micropayment_V1_CodifyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Micropayment_V1_CodifyResponse

  /// GetPathMetadata gets codified website metadata for a given path
  ///
  /// Important Note: This RPC's current implementation is insecure and
  /// it's sole design is to enable PoC and trials.
  func getPathMetadata(
    request: Code_Micropayment_V1_GetPathMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Micropayment_V1_GetPathMetadataResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Micropayment_V1_MicroPaymentAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Micropayment_V1_MicroPaymentServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Micropayment_V1_MicroPaymentServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Micropayment_V1_MicroPaymentServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_GetStatusRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_GetStatusResponse>(),
        interceptors: self.interceptors?.makeGetStatusInterceptors() ?? [],
        wrapping: { try await self.getStatus(request: $0, context: $1) }
      )

    case "RegisterWebhook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_RegisterWebhookRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_RegisterWebhookResponse>(),
        interceptors: self.interceptors?.makeRegisterWebhookInterceptors() ?? [],
        wrapping: { try await self.registerWebhook(request: $0, context: $1) }
      )

    case "Codify":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_CodifyRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_CodifyResponse>(),
        interceptors: self.interceptors?.makeCodifyInterceptors() ?? [],
        wrapping: { try await self.codify(request: $0, context: $1) }
      )

    case "GetPathMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Micropayment_V1_GetPathMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Code_Micropayment_V1_GetPathMetadataResponse>(),
        interceptors: self.interceptors?.makeGetPathMetadataInterceptors() ?? [],
        wrapping: { try await self.getPathMetadata(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Code_Micropayment_V1_MicroPaymentServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStatusInterceptors() -> [ServerInterceptor<Code_Micropayment_V1_GetStatusRequest, Code_Micropayment_V1_GetStatusResponse>]

  /// - Returns: Interceptors to use when handling 'registerWebhook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterWebhookInterceptors() -> [ServerInterceptor<Code_Micropayment_V1_RegisterWebhookRequest, Code_Micropayment_V1_RegisterWebhookResponse>]

  /// - Returns: Interceptors to use when handling 'codify'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodifyInterceptors() -> [ServerInterceptor<Code_Micropayment_V1_CodifyRequest, Code_Micropayment_V1_CodifyResponse>]

  /// - Returns: Interceptors to use when handling 'getPathMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPathMetadataInterceptors() -> [ServerInterceptor<Code_Micropayment_V1_GetPathMetadataRequest, Code_Micropayment_V1_GetPathMetadataResponse>]
}

public enum Code_Micropayment_V1_MicroPaymentServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MicroPayment",
    fullName: "code.micropayment.v1.MicroPayment",
    methods: [
      Code_Micropayment_V1_MicroPaymentServerMetadata.Methods.getStatus,
      Code_Micropayment_V1_MicroPaymentServerMetadata.Methods.registerWebhook,
      Code_Micropayment_V1_MicroPaymentServerMetadata.Methods.codify,
      Code_Micropayment_V1_MicroPaymentServerMetadata.Methods.getPathMetadata,
    ]
  )

  public enum Methods {
    public static let getStatus = GRPCMethodDescriptor(
      name: "GetStatus",
      path: "/code.micropayment.v1.MicroPayment/GetStatus",
      type: GRPCCallType.unary
    )

    public static let registerWebhook = GRPCMethodDescriptor(
      name: "RegisterWebhook",
      path: "/code.micropayment.v1.MicroPayment/RegisterWebhook",
      type: GRPCCallType.unary
    )

    public static let codify = GRPCMethodDescriptor(
      name: "Codify",
      path: "/code.micropayment.v1.MicroPayment/Codify",
      type: GRPCCallType.unary
    )

    public static let getPathMetadata = GRPCMethodDescriptor(
      name: "GetPathMetadata",
      path: "/code.micropayment.v1.MicroPayment/GetPathMetadata",
      type: GRPCCallType.unary
    )
  }
}
