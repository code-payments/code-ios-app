//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: messaging/v1/messaging_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Messaging_V1_MessagingClient`, then call methods of this protocol to make API calls.
public protocol Code_Messaging_V1_MessagingClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? { get }

  func openMessageStream(
    _ request: Code_Messaging_V1_OpenMessageStreamRequest,
    callOptions: CallOptions?,
    handler: @escaping (Code_Messaging_V1_OpenMessageStreamResponse) -> Void
  ) -> ServerStreamingCall<Code_Messaging_V1_OpenMessageStreamRequest, Code_Messaging_V1_OpenMessageStreamResponse>

  func openMessageStreamWithKeepAlive(
    callOptions: CallOptions?,
    handler: @escaping (Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>

  func pollMessages(
    _ request: Code_Messaging_V1_PollMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Messaging_V1_PollMessagesRequest, Code_Messaging_V1_PollMessagesResponse>

  func ackMessages(
    _ request: Code_Messaging_V1_AckMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Messaging_V1_AckMessagesRequest, Code_Messaging_V1_AckMesssagesResponse>

  func sendMessage(
    _ request: Code_Messaging_V1_SendMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Messaging_V1_SendMessageRequest, Code_Messaging_V1_SendMessageResponse>
}

extension Code_Messaging_V1_MessagingClientProtocol {
  public var serviceName: String {
    return "code.messaging.v1.Messaging"
  }

  /// OpenMessageStream opens a stream of messages. Messages are routed using the
  /// public key of a rendezvous keypair derived by both the sender and the
  /// recipient of the messages. The sender may be a client or server.
  ///
  /// Messages are expected to be acked once they have been processed by the client.
  /// Ack'd messages will no longer be delivered on future OpenMessageStream calls,
  /// and are eligible for deletion from the service. Clients should, however, handle
  /// duplicate delivery of messages.
  ///
  /// For grabbing a bill, the expected flow is as follows:
  ///   1. The payment sender creates a cash scan code
  ///   2. The payment sender calls OpenMessageStream on the rendezvous public key, which is
  ///      derived by using sha256(scan payload) as the keypair seed.
  ///   3. The payment recipient scans the code and uses SendMessage to send their account ID
  ///      back to the sender via the rendezvous public key.
  ///   4. The payment sender receives the message, submits the intent, and closes the stream.
  ///
  /// For receiving a bill of requested value, the expected flow is as follows:
  ///   1. The payment recipient uses SendMessage to send their account ID and payment amount to
  ///      the sender via the rendezvous public key, which is derived by using sha256(scan payload)
  ///      as the keypair seed.
  ///   2. The payment recipient calls OpenMessageStream on the rendezvous public key to listen
  ///      for status messages generated by client/server. It must ignore the original message it sent
  ///      as part of step 1.
  ///   3. The payment recipient creates a payment request scan code
  ///   4. The payment sender calls PollMessages on the rendezvous public key. This is ok because
  ///      we know the message exists per step 1, and doesn't actually incur a long poll. This is a
  ///      required hack because we don't have the infrastructure in place to allow multiple listens
  ///      on the same stream, and the recipient needs real-time status updates.
  ///   5. The payment sender receives the message (any status messages are ignored), and submits the
  ///      intent.
  ///   6. The payment recipient observes status message (eg. IntentSubmitted, ClientRejectedPayment,
  ///      WebhookCalled) for payment state.
  ///   7. The payment recipient closes the stream once the payment hits a terminal state, or times out.
  ///
  /// For logging in, the expected flow is as follows:
  ///   1. The third party uses SendMessage to send their login challenge to the user via the rendezvous
  ///      public key, which is derived by using sha256(scan payload) as the keypair seed.
  ///   2. The third party calls OpenMessageStream on the rendezvous public key to listen for status
  ///      messages generated by server. It must ignore the original message it sent as part of step 1.
  ///   3. The third party creates a login scan code
  ///   4. The user logging in calls PollMessages on the rendezvous public key. This is ok because
  ///      we know the message exists per step 1, and doesn't actually incur a long poll. This is a
  ///      required hack because we don't have the infrastructure in place to allow multiple listens
  ///      on the same stream, and the recipient needs real-time status updates.
  ///   5. The user logging in receives the message (any status messages are ignored), verifies it,
  ///      then uses SendMessage to send a login attempt.
  ///   6. The third party receives sees the login attempt message, verifies it, then accepts/denies
  ///      the login attempt. The stream is closed.
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenMessageStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func openMessageStream(
    _ request: Code_Messaging_V1_OpenMessageStreamRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Code_Messaging_V1_OpenMessageStreamResponse) -> Void
  ) -> ServerStreamingCall<Code_Messaging_V1_OpenMessageStreamRequest, Code_Messaging_V1_OpenMessageStreamResponse> {
    return self.makeServerStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// OpenMessageStreamWithKeepAlive is like OpenMessageStream, but enables a ping/pong
  /// keepalive to determine the health of the stream at both the client and server.
  ///
  /// The keepalive protocol is as follows:
  ///   1. Client initiates a stream by sending an OpenMessageStreamRequest.
  ///   2. Upon stream initialization, server begins the keepalive protocol.
  ///   3. Server sends a ping to the client.
  ///   4. Client responds with a pong as fast as possible, making note of
  ///      the delay for when to expect the next ping.
  ///   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
  ///      or is deemed to be unhealthy.
  ///
  /// Client notes:
  /// * Client should be careful to process messages async, so any responses to pings are
  ///   not delayed.
  /// * Clients should implement a reasonable backoff strategy upon continued timeout failures.
  /// * Clients that abuse pong messages may have their streams terminated by server.
  ///
  /// At any point in the stream, server will respond with messages in real time as
  /// they are observed. Messages sent over the stream should not affect the ping/pong
  /// protocol timings. Individual protocols for payment flows remain the same, and are
  /// documented in OpenMessageStream.
  ///
  /// Note: This API will enforce OpenMessageStreamRequest.signature is set as part of migration
  ///       to this newer protocol
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func openMessageStreamWithKeepAlive(
    callOptions: CallOptions? = nil,
    handler: @escaping (Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStreamWithKeepAlive.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamWithKeepAliveInterceptors() ?? [],
      handler: handler
    )
  }

  /// PollMessages is like OpenMessageStream, but uses a polling flow for receiving
  /// messages. Updates are not real-time and depedent on the polling interval.
  /// This RPC supports all message types.
  ///
  /// This is a temporary RPC until OpenMessageStream can be built out generically on
  /// both client and server, while supporting things like multiple listeners.
  ///
  /// - Parameters:
  ///   - request: Request to send to PollMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pollMessages(
    _ request: Code_Messaging_V1_PollMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Messaging_V1_PollMessagesRequest, Code_Messaging_V1_PollMessagesResponse> {
    return self.makeUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.pollMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePollMessagesInterceptors() ?? []
    )
  }

  /// AckMessages acks one or more messages that have been successfully delivered to
  /// the client.
  ///
  /// - Parameters:
  ///   - request: Request to send to AckMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ackMessages(
    _ request: Code_Messaging_V1_AckMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Messaging_V1_AckMessagesRequest, Code_Messaging_V1_AckMesssagesResponse> {
    return self.makeUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.ackMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAckMessagesInterceptors() ?? []
    )
  }

  /// SendMessage sends a message.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendMessage(
    _ request: Code_Messaging_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Messaging_V1_SendMessageRequest, Code_Messaging_V1_SendMessageResponse> {
    return self.makeUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Code_Messaging_V1_MessagingClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Code_Messaging_V1_MessagingNIOClient")
public final class Code_Messaging_V1_MessagingClient: Code_Messaging_V1_MessagingClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.messaging.v1.Messaging service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Messaging_V1_MessagingNIOClient: Code_Messaging_V1_MessagingClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol?

  /// Creates a client for the code.messaging.v1.Messaging service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Messaging_V1_MessagingAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? { get }

  func makeOpenMessageStreamCall(
    _ request: Code_Messaging_V1_OpenMessageStreamRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Code_Messaging_V1_OpenMessageStreamRequest, Code_Messaging_V1_OpenMessageStreamResponse>

  func makeOpenMessageStreamWithKeepAliveCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>

  func makePollMessagesCall(
    _ request: Code_Messaging_V1_PollMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Messaging_V1_PollMessagesRequest, Code_Messaging_V1_PollMessagesResponse>

  func makeAckMessagesCall(
    _ request: Code_Messaging_V1_AckMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Messaging_V1_AckMessagesRequest, Code_Messaging_V1_AckMesssagesResponse>

  func makeSendMessageCall(
    _ request: Code_Messaging_V1_SendMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Messaging_V1_SendMessageRequest, Code_Messaging_V1_SendMessageResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Messaging_V1_MessagingAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Messaging_V1_MessagingClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeOpenMessageStreamCall(
    _ request: Code_Messaging_V1_OpenMessageStreamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Code_Messaging_V1_OpenMessageStreamRequest, Code_Messaging_V1_OpenMessageStreamResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamInterceptors() ?? []
    )
  }

  public func makeOpenMessageStreamWithKeepAliveCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStreamWithKeepAlive.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamWithKeepAliveInterceptors() ?? []
    )
  }

  public func makePollMessagesCall(
    _ request: Code_Messaging_V1_PollMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Messaging_V1_PollMessagesRequest, Code_Messaging_V1_PollMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.pollMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePollMessagesInterceptors() ?? []
    )
  }

  public func makeAckMessagesCall(
    _ request: Code_Messaging_V1_AckMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Messaging_V1_AckMessagesRequest, Code_Messaging_V1_AckMesssagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.ackMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAckMessagesInterceptors() ?? []
    )
  }

  public func makeSendMessageCall(
    _ request: Code_Messaging_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Messaging_V1_SendMessageRequest, Code_Messaging_V1_SendMessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Messaging_V1_MessagingAsyncClientProtocol {
  public func openMessageStream(
    _ request: Code_Messaging_V1_OpenMessageStreamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Messaging_V1_OpenMessageStreamResponse> {
    return self.performAsyncServerStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamInterceptors() ?? []
    )
  }

  public func openMessageStreamWithKeepAlive<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse> where RequestStream: Sequence, RequestStream.Element == Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStreamWithKeepAlive.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamWithKeepAliveInterceptors() ?? []
    )
  }

  public func openMessageStreamWithKeepAlive<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStreamWithKeepAlive.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenMessageStreamWithKeepAliveInterceptors() ?? []
    )
  }

  public func pollMessages(
    _ request: Code_Messaging_V1_PollMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Messaging_V1_PollMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.pollMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePollMessagesInterceptors() ?? []
    )
  }

  public func ackMessages(
    _ request: Code_Messaging_V1_AckMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Messaging_V1_AckMesssagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.ackMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAckMessagesInterceptors() ?? []
    )
  }

  public func sendMessage(
    _ request: Code_Messaging_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Messaging_V1_SendMessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Messaging_V1_MessagingClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Messaging_V1_MessagingAsyncClient: Code_Messaging_V1_MessagingAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Code_Messaging_V1_MessagingClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'openMessageStream'.
  func makeOpenMessageStreamInterceptors() -> [ClientInterceptor<Code_Messaging_V1_OpenMessageStreamRequest, Code_Messaging_V1_OpenMessageStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'openMessageStreamWithKeepAlive'.
  func makeOpenMessageStreamWithKeepAliveInterceptors() -> [ClientInterceptor<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>]

  /// - Returns: Interceptors to use when invoking 'pollMessages'.
  func makePollMessagesInterceptors() -> [ClientInterceptor<Code_Messaging_V1_PollMessagesRequest, Code_Messaging_V1_PollMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'ackMessages'.
  func makeAckMessagesInterceptors() -> [ClientInterceptor<Code_Messaging_V1_AckMessagesRequest, Code_Messaging_V1_AckMesssagesResponse>]

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Code_Messaging_V1_SendMessageRequest, Code_Messaging_V1_SendMessageResponse>]
}

public enum Code_Messaging_V1_MessagingClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Messaging",
    fullName: "code.messaging.v1.Messaging",
    methods: [
      Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStream,
      Code_Messaging_V1_MessagingClientMetadata.Methods.openMessageStreamWithKeepAlive,
      Code_Messaging_V1_MessagingClientMetadata.Methods.pollMessages,
      Code_Messaging_V1_MessagingClientMetadata.Methods.ackMessages,
      Code_Messaging_V1_MessagingClientMetadata.Methods.sendMessage,
    ]
  )

  public enum Methods {
    public static let openMessageStream = GRPCMethodDescriptor(
      name: "OpenMessageStream",
      path: "/code.messaging.v1.Messaging/OpenMessageStream",
      type: GRPCCallType.serverStreaming
    )

    public static let openMessageStreamWithKeepAlive = GRPCMethodDescriptor(
      name: "OpenMessageStreamWithKeepAlive",
      path: "/code.messaging.v1.Messaging/OpenMessageStreamWithKeepAlive",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let pollMessages = GRPCMethodDescriptor(
      name: "PollMessages",
      path: "/code.messaging.v1.Messaging/PollMessages",
      type: GRPCCallType.unary
    )

    public static let ackMessages = GRPCMethodDescriptor(
      name: "AckMessages",
      path: "/code.messaging.v1.Messaging/AckMessages",
      type: GRPCCallType.unary
    )

    public static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/code.messaging.v1.Messaging/SendMessage",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Messaging_V1_MessagingProvider: CallHandlerProvider {
  var interceptors: Code_Messaging_V1_MessagingServerInterceptorFactoryProtocol? { get }

  /// OpenMessageStream opens a stream of messages. Messages are routed using the
  /// public key of a rendezvous keypair derived by both the sender and the
  /// recipient of the messages. The sender may be a client or server.
  ///
  /// Messages are expected to be acked once they have been processed by the client.
  /// Ack'd messages will no longer be delivered on future OpenMessageStream calls,
  /// and are eligible for deletion from the service. Clients should, however, handle
  /// duplicate delivery of messages.
  ///
  /// For grabbing a bill, the expected flow is as follows:
  ///   1. The payment sender creates a cash scan code
  ///   2. The payment sender calls OpenMessageStream on the rendezvous public key, which is
  ///      derived by using sha256(scan payload) as the keypair seed.
  ///   3. The payment recipient scans the code and uses SendMessage to send their account ID
  ///      back to the sender via the rendezvous public key.
  ///   4. The payment sender receives the message, submits the intent, and closes the stream.
  ///
  /// For receiving a bill of requested value, the expected flow is as follows:
  ///   1. The payment recipient uses SendMessage to send their account ID and payment amount to
  ///      the sender via the rendezvous public key, which is derived by using sha256(scan payload)
  ///      as the keypair seed.
  ///   2. The payment recipient calls OpenMessageStream on the rendezvous public key to listen
  ///      for status messages generated by client/server. It must ignore the original message it sent
  ///      as part of step 1.
  ///   3. The payment recipient creates a payment request scan code
  ///   4. The payment sender calls PollMessages on the rendezvous public key. This is ok because
  ///      we know the message exists per step 1, and doesn't actually incur a long poll. This is a
  ///      required hack because we don't have the infrastructure in place to allow multiple listens
  ///      on the same stream, and the recipient needs real-time status updates.
  ///   5. The payment sender receives the message (any status messages are ignored), and submits the
  ///      intent.
  ///   6. The payment recipient observes status message (eg. IntentSubmitted, ClientRejectedPayment,
  ///      WebhookCalled) for payment state.
  ///   7. The payment recipient closes the stream once the payment hits a terminal state, or times out.
  ///
  /// For logging in, the expected flow is as follows:
  ///   1. The third party uses SendMessage to send their login challenge to the user via the rendezvous
  ///      public key, which is derived by using sha256(scan payload) as the keypair seed.
  ///   2. The third party calls OpenMessageStream on the rendezvous public key to listen for status
  ///      messages generated by server. It must ignore the original message it sent as part of step 1.
  ///   3. The third party creates a login scan code
  ///   4. The user logging in calls PollMessages on the rendezvous public key. This is ok because
  ///      we know the message exists per step 1, and doesn't actually incur a long poll. This is a
  ///      required hack because we don't have the infrastructure in place to allow multiple listens
  ///      on the same stream, and the recipient needs real-time status updates.
  ///   5. The user logging in receives the message (any status messages are ignored), verifies it,
  ///      then uses SendMessage to send a login attempt.
  ///   6. The third party receives sees the login attempt message, verifies it, then accepts/denies
  ///      the login attempt. The stream is closed.
  func openMessageStream(request: Code_Messaging_V1_OpenMessageStreamRequest, context: StreamingResponseCallContext<Code_Messaging_V1_OpenMessageStreamResponse>) -> EventLoopFuture<GRPCStatus>

  /// OpenMessageStreamWithKeepAlive is like OpenMessageStream, but enables a ping/pong
  /// keepalive to determine the health of the stream at both the client and server.
  ///
  /// The keepalive protocol is as follows:
  ///   1. Client initiates a stream by sending an OpenMessageStreamRequest.
  ///   2. Upon stream initialization, server begins the keepalive protocol.
  ///   3. Server sends a ping to the client.
  ///   4. Client responds with a pong as fast as possible, making note of
  ///      the delay for when to expect the next ping.
  ///   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
  ///      or is deemed to be unhealthy.
  ///
  /// Client notes:
  /// * Client should be careful to process messages async, so any responses to pings are
  ///   not delayed.
  /// * Clients should implement a reasonable backoff strategy upon continued timeout failures.
  /// * Clients that abuse pong messages may have their streams terminated by server.
  ///
  /// At any point in the stream, server will respond with messages in real time as
  /// they are observed. Messages sent over the stream should not affect the ping/pong
  /// protocol timings. Individual protocols for payment flows remain the same, and are
  /// documented in OpenMessageStream.
  ///
  /// Note: This API will enforce OpenMessageStreamRequest.signature is set as part of migration
  ///       to this newer protocol
  func openMessageStreamWithKeepAlive(context: StreamingResponseCallContext<Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>) -> EventLoopFuture<(StreamEvent<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest>) -> Void>

  /// PollMessages is like OpenMessageStream, but uses a polling flow for receiving
  /// messages. Updates are not real-time and depedent on the polling interval.
  /// This RPC supports all message types.
  ///
  /// This is a temporary RPC until OpenMessageStream can be built out generically on
  /// both client and server, while supporting things like multiple listeners.
  func pollMessages(request: Code_Messaging_V1_PollMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Messaging_V1_PollMessagesResponse>

  /// AckMessages acks one or more messages that have been successfully delivered to
  /// the client.
  func ackMessages(request: Code_Messaging_V1_AckMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Messaging_V1_AckMesssagesResponse>

  /// SendMessage sends a message.
  func sendMessage(request: Code_Messaging_V1_SendMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Messaging_V1_SendMessageResponse>
}

extension Code_Messaging_V1_MessagingProvider {
  public var serviceName: Substring {
    return Code_Messaging_V1_MessagingServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "OpenMessageStream":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_OpenMessageStreamRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_OpenMessageStreamResponse>(),
        interceptors: self.interceptors?.makeOpenMessageStreamInterceptors() ?? [],
        userFunction: self.openMessageStream(request:context:)
      )

    case "OpenMessageStreamWithKeepAlive":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>(),
        interceptors: self.interceptors?.makeOpenMessageStreamWithKeepAliveInterceptors() ?? [],
        observerFactory: self.openMessageStreamWithKeepAlive(context:)
      )

    case "PollMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_PollMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_PollMessagesResponse>(),
        interceptors: self.interceptors?.makePollMessagesInterceptors() ?? [],
        userFunction: self.pollMessages(request:context:)
      )

    case "AckMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_AckMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_AckMesssagesResponse>(),
        interceptors: self.interceptors?.makeAckMessagesInterceptors() ?? [],
        userFunction: self.ackMessages(request:context:)
      )

    case "SendMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        userFunction: self.sendMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Messaging_V1_MessagingAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Messaging_V1_MessagingServerInterceptorFactoryProtocol? { get }

  /// OpenMessageStream opens a stream of messages. Messages are routed using the
  /// public key of a rendezvous keypair derived by both the sender and the
  /// recipient of the messages. The sender may be a client or server.
  ///
  /// Messages are expected to be acked once they have been processed by the client.
  /// Ack'd messages will no longer be delivered on future OpenMessageStream calls,
  /// and are eligible for deletion from the service. Clients should, however, handle
  /// duplicate delivery of messages.
  ///
  /// For grabbing a bill, the expected flow is as follows:
  ///   1. The payment sender creates a cash scan code
  ///   2. The payment sender calls OpenMessageStream on the rendezvous public key, which is
  ///      derived by using sha256(scan payload) as the keypair seed.
  ///   3. The payment recipient scans the code and uses SendMessage to send their account ID
  ///      back to the sender via the rendezvous public key.
  ///   4. The payment sender receives the message, submits the intent, and closes the stream.
  ///
  /// For receiving a bill of requested value, the expected flow is as follows:
  ///   1. The payment recipient uses SendMessage to send their account ID and payment amount to
  ///      the sender via the rendezvous public key, which is derived by using sha256(scan payload)
  ///      as the keypair seed.
  ///   2. The payment recipient calls OpenMessageStream on the rendezvous public key to listen
  ///      for status messages generated by client/server. It must ignore the original message it sent
  ///      as part of step 1.
  ///   3. The payment recipient creates a payment request scan code
  ///   4. The payment sender calls PollMessages on the rendezvous public key. This is ok because
  ///      we know the message exists per step 1, and doesn't actually incur a long poll. This is a
  ///      required hack because we don't have the infrastructure in place to allow multiple listens
  ///      on the same stream, and the recipient needs real-time status updates.
  ///   5. The payment sender receives the message (any status messages are ignored), and submits the
  ///      intent.
  ///   6. The payment recipient observes status message (eg. IntentSubmitted, ClientRejectedPayment,
  ///      WebhookCalled) for payment state.
  ///   7. The payment recipient closes the stream once the payment hits a terminal state, or times out.
  ///
  /// For logging in, the expected flow is as follows:
  ///   1. The third party uses SendMessage to send their login challenge to the user via the rendezvous
  ///      public key, which is derived by using sha256(scan payload) as the keypair seed.
  ///   2. The third party calls OpenMessageStream on the rendezvous public key to listen for status
  ///      messages generated by server. It must ignore the original message it sent as part of step 1.
  ///   3. The third party creates a login scan code
  ///   4. The user logging in calls PollMessages on the rendezvous public key. This is ok because
  ///      we know the message exists per step 1, and doesn't actually incur a long poll. This is a
  ///      required hack because we don't have the infrastructure in place to allow multiple listens
  ///      on the same stream, and the recipient needs real-time status updates.
  ///   5. The user logging in receives the message (any status messages are ignored), verifies it,
  ///      then uses SendMessage to send a login attempt.
  ///   6. The third party receives sees the login attempt message, verifies it, then accepts/denies
  ///      the login attempt. The stream is closed.
  @Sendable func openMessageStream(
    request: Code_Messaging_V1_OpenMessageStreamRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Code_Messaging_V1_OpenMessageStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// OpenMessageStreamWithKeepAlive is like OpenMessageStream, but enables a ping/pong
  /// keepalive to determine the health of the stream at both the client and server.
  ///
  /// The keepalive protocol is as follows:
  ///   1. Client initiates a stream by sending an OpenMessageStreamRequest.
  ///   2. Upon stream initialization, server begins the keepalive protocol.
  ///   3. Server sends a ping to the client.
  ///   4. Client responds with a pong as fast as possible, making note of
  ///      the delay for when to expect the next ping.
  ///   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
  ///      or is deemed to be unhealthy.
  ///
  /// Client notes:
  /// * Client should be careful to process messages async, so any responses to pings are
  ///   not delayed.
  /// * Clients should implement a reasonable backoff strategy upon continued timeout failures.
  /// * Clients that abuse pong messages may have their streams terminated by server.
  ///
  /// At any point in the stream, server will respond with messages in real time as
  /// they are observed. Messages sent over the stream should not affect the ping/pong
  /// protocol timings. Individual protocols for payment flows remain the same, and are
  /// documented in OpenMessageStream.
  ///
  /// Note: This API will enforce OpenMessageStreamRequest.signature is set as part of migration
  ///       to this newer protocol
  @Sendable func openMessageStreamWithKeepAlive(
    requestStream: GRPCAsyncRequestStream<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// PollMessages is like OpenMessageStream, but uses a polling flow for receiving
  /// messages. Updates are not real-time and depedent on the polling interval.
  /// This RPC supports all message types.
  ///
  /// This is a temporary RPC until OpenMessageStream can be built out generically on
  /// both client and server, while supporting things like multiple listeners.
  @Sendable func pollMessages(
    request: Code_Messaging_V1_PollMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Messaging_V1_PollMessagesResponse

  /// AckMessages acks one or more messages that have been successfully delivered to
  /// the client.
  @Sendable func ackMessages(
    request: Code_Messaging_V1_AckMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Messaging_V1_AckMesssagesResponse

  /// SendMessage sends a message.
  @Sendable func sendMessage(
    request: Code_Messaging_V1_SendMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Messaging_V1_SendMessageResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Messaging_V1_MessagingAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Messaging_V1_MessagingServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Messaging_V1_MessagingServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Messaging_V1_MessagingServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "OpenMessageStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_OpenMessageStreamRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_OpenMessageStreamResponse>(),
        interceptors: self.interceptors?.makeOpenMessageStreamInterceptors() ?? [],
        wrapping: self.openMessageStream(request:responseStream:context:)
      )

    case "OpenMessageStreamWithKeepAlive":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>(),
        interceptors: self.interceptors?.makeOpenMessageStreamWithKeepAliveInterceptors() ?? [],
        wrapping: self.openMessageStreamWithKeepAlive(requestStream:responseStream:context:)
      )

    case "PollMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_PollMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_PollMessagesResponse>(),
        interceptors: self.interceptors?.makePollMessagesInterceptors() ?? [],
        wrapping: self.pollMessages(request:context:)
      )

    case "AckMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_AckMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_AckMesssagesResponse>(),
        interceptors: self.interceptors?.makeAckMessagesInterceptors() ?? [],
        wrapping: self.ackMessages(request:context:)
      )

    case "SendMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Messaging_V1_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Code_Messaging_V1_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        wrapping: self.sendMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Code_Messaging_V1_MessagingServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'openMessageStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOpenMessageStreamInterceptors() -> [ServerInterceptor<Code_Messaging_V1_OpenMessageStreamRequest, Code_Messaging_V1_OpenMessageStreamResponse>]

  /// - Returns: Interceptors to use when handling 'openMessageStreamWithKeepAlive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOpenMessageStreamWithKeepAliveInterceptors() -> [ServerInterceptor<Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse>]

  /// - Returns: Interceptors to use when handling 'pollMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePollMessagesInterceptors() -> [ServerInterceptor<Code_Messaging_V1_PollMessagesRequest, Code_Messaging_V1_PollMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'ackMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAckMessagesInterceptors() -> [ServerInterceptor<Code_Messaging_V1_AckMessagesRequest, Code_Messaging_V1_AckMesssagesResponse>]

  /// - Returns: Interceptors to use when handling 'sendMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessageInterceptors() -> [ServerInterceptor<Code_Messaging_V1_SendMessageRequest, Code_Messaging_V1_SendMessageResponse>]
}

public enum Code_Messaging_V1_MessagingServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Messaging",
    fullName: "code.messaging.v1.Messaging",
    methods: [
      Code_Messaging_V1_MessagingServerMetadata.Methods.openMessageStream,
      Code_Messaging_V1_MessagingServerMetadata.Methods.openMessageStreamWithKeepAlive,
      Code_Messaging_V1_MessagingServerMetadata.Methods.pollMessages,
      Code_Messaging_V1_MessagingServerMetadata.Methods.ackMessages,
      Code_Messaging_V1_MessagingServerMetadata.Methods.sendMessage,
    ]
  )

  public enum Methods {
    public static let openMessageStream = GRPCMethodDescriptor(
      name: "OpenMessageStream",
      path: "/code.messaging.v1.Messaging/OpenMessageStream",
      type: GRPCCallType.serverStreaming
    )

    public static let openMessageStreamWithKeepAlive = GRPCMethodDescriptor(
      name: "OpenMessageStreamWithKeepAlive",
      path: "/code.messaging.v1.Messaging/OpenMessageStreamWithKeepAlive",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let pollMessages = GRPCMethodDescriptor(
      name: "PollMessages",
      path: "/code.messaging.v1.Messaging/PollMessages",
      type: GRPCCallType.unary
    )

    public static let ackMessages = GRPCMethodDescriptor(
      name: "AckMessages",
      path: "/code.messaging.v1.Messaging/AckMessages",
      type: GRPCCallType.unary
    )

    public static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/code.messaging.v1.Messaging/SendMessage",
      type: GRPCCallType.unary
    )
  }
}
