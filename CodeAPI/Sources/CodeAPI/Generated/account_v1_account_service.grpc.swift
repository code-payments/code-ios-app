//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: account/v1/account_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Account_V1_AccountClient`, then call methods of this protocol to make API calls.
public protocol Code_Account_V1_AccountClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? { get }

  func isCodeAccount(
    _ request: Code_Account_V1_IsCodeAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Account_V1_IsCodeAccountRequest, Code_Account_V1_IsCodeAccountResponse>

  func getTokenAccountInfos(
    _ request: Code_Account_V1_GetTokenAccountInfosRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Account_V1_GetTokenAccountInfosRequest, Code_Account_V1_GetTokenAccountInfosResponse>

  func linkAdditionalAccounts(
    _ request: Code_Account_V1_LinkAdditionalAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Account_V1_LinkAdditionalAccountsRequest, Code_Account_V1_LinkAdditionalAccountsResponse>
}

extension Code_Account_V1_AccountClientProtocol {
  public var serviceName: String {
    return "code.account.v1.Account"
  }

  /// IsCodeAccount returns whether an owner account is a Code account. This hints
  /// to the client whether the account can be logged in, used for making payments,
  /// etc.
  ///
  /// - Parameters:
  ///   - request: Request to send to IsCodeAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func isCodeAccount(
    _ request: Code_Account_V1_IsCodeAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Account_V1_IsCodeAccountRequest, Code_Account_V1_IsCodeAccountResponse> {
    return self.makeUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.isCodeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsCodeAccountInterceptors() ?? []
    )
  }

  /// GetTokenAccountInfos returns token account metadata relevant to the Code owner
  /// account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenAccountInfos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenAccountInfos(
    _ request: Code_Account_V1_GetTokenAccountInfosRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Account_V1_GetTokenAccountInfosRequest, Code_Account_V1_GetTokenAccountInfosResponse> {
    return self.makeUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.getTokenAccountInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenAccountInfosInterceptors() ?? []
    )
  }

  /// LinkAdditionalAccounts allows a client to declare additional accounts to
  /// be tracked and used within Code. The accounts declared in this RPC are not
  /// managed by Code (ie. not a Timelock account), created externally and cannot
  /// be linked automatically (ie. authority derived off user 12 words).
  ///
  /// - Parameters:
  ///   - request: Request to send to LinkAdditionalAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func linkAdditionalAccounts(
    _ request: Code_Account_V1_LinkAdditionalAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Account_V1_LinkAdditionalAccountsRequest, Code_Account_V1_LinkAdditionalAccountsResponse> {
    return self.makeUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.linkAdditionalAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAdditionalAccountsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Code_Account_V1_AccountClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Code_Account_V1_AccountNIOClient")
public final class Code_Account_V1_AccountClient: Code_Account_V1_AccountClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.account.v1.Account service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Account_V1_AccountNIOClient: Code_Account_V1_AccountClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol?

  /// Creates a client for the code.account.v1.Account service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Account_V1_AccountAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? { get }

  func makeIsCodeAccountCall(
    _ request: Code_Account_V1_IsCodeAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Account_V1_IsCodeAccountRequest, Code_Account_V1_IsCodeAccountResponse>

  func makeGetTokenAccountInfosCall(
    _ request: Code_Account_V1_GetTokenAccountInfosRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Account_V1_GetTokenAccountInfosRequest, Code_Account_V1_GetTokenAccountInfosResponse>

  func makeLinkAdditionalAccountsCall(
    _ request: Code_Account_V1_LinkAdditionalAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Account_V1_LinkAdditionalAccountsRequest, Code_Account_V1_LinkAdditionalAccountsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Account_V1_AccountAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Account_V1_AccountClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeIsCodeAccountCall(
    _ request: Code_Account_V1_IsCodeAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Account_V1_IsCodeAccountRequest, Code_Account_V1_IsCodeAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.isCodeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsCodeAccountInterceptors() ?? []
    )
  }

  public func makeGetTokenAccountInfosCall(
    _ request: Code_Account_V1_GetTokenAccountInfosRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Account_V1_GetTokenAccountInfosRequest, Code_Account_V1_GetTokenAccountInfosResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.getTokenAccountInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenAccountInfosInterceptors() ?? []
    )
  }

  public func makeLinkAdditionalAccountsCall(
    _ request: Code_Account_V1_LinkAdditionalAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Account_V1_LinkAdditionalAccountsRequest, Code_Account_V1_LinkAdditionalAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.linkAdditionalAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAdditionalAccountsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Account_V1_AccountAsyncClientProtocol {
  public func isCodeAccount(
    _ request: Code_Account_V1_IsCodeAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Account_V1_IsCodeAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.isCodeAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIsCodeAccountInterceptors() ?? []
    )
  }

  public func getTokenAccountInfos(
    _ request: Code_Account_V1_GetTokenAccountInfosRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Account_V1_GetTokenAccountInfosResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.getTokenAccountInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenAccountInfosInterceptors() ?? []
    )
  }

  public func linkAdditionalAccounts(
    _ request: Code_Account_V1_LinkAdditionalAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Account_V1_LinkAdditionalAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Account_V1_AccountClientMetadata.Methods.linkAdditionalAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkAdditionalAccountsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Account_V1_AccountAsyncClient: Code_Account_V1_AccountAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Code_Account_V1_AccountClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'isCodeAccount'.
  func makeIsCodeAccountInterceptors() -> [ClientInterceptor<Code_Account_V1_IsCodeAccountRequest, Code_Account_V1_IsCodeAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getTokenAccountInfos'.
  func makeGetTokenAccountInfosInterceptors() -> [ClientInterceptor<Code_Account_V1_GetTokenAccountInfosRequest, Code_Account_V1_GetTokenAccountInfosResponse>]

  /// - Returns: Interceptors to use when invoking 'linkAdditionalAccounts'.
  func makeLinkAdditionalAccountsInterceptors() -> [ClientInterceptor<Code_Account_V1_LinkAdditionalAccountsRequest, Code_Account_V1_LinkAdditionalAccountsResponse>]
}

public enum Code_Account_V1_AccountClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Account",
    fullName: "code.account.v1.Account",
    methods: [
      Code_Account_V1_AccountClientMetadata.Methods.isCodeAccount,
      Code_Account_V1_AccountClientMetadata.Methods.getTokenAccountInfos,
      Code_Account_V1_AccountClientMetadata.Methods.linkAdditionalAccounts,
    ]
  )

  public enum Methods {
    public static let isCodeAccount = GRPCMethodDescriptor(
      name: "IsCodeAccount",
      path: "/code.account.v1.Account/IsCodeAccount",
      type: GRPCCallType.unary
    )

    public static let getTokenAccountInfos = GRPCMethodDescriptor(
      name: "GetTokenAccountInfos",
      path: "/code.account.v1.Account/GetTokenAccountInfos",
      type: GRPCCallType.unary
    )

    public static let linkAdditionalAccounts = GRPCMethodDescriptor(
      name: "LinkAdditionalAccounts",
      path: "/code.account.v1.Account/LinkAdditionalAccounts",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Account_V1_AccountProvider: CallHandlerProvider {
  var interceptors: Code_Account_V1_AccountServerInterceptorFactoryProtocol? { get }

  /// IsCodeAccount returns whether an owner account is a Code account. This hints
  /// to the client whether the account can be logged in, used for making payments,
  /// etc.
  func isCodeAccount(request: Code_Account_V1_IsCodeAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Account_V1_IsCodeAccountResponse>

  /// GetTokenAccountInfos returns token account metadata relevant to the Code owner
  /// account.
  func getTokenAccountInfos(request: Code_Account_V1_GetTokenAccountInfosRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Account_V1_GetTokenAccountInfosResponse>

  /// LinkAdditionalAccounts allows a client to declare additional accounts to
  /// be tracked and used within Code. The accounts declared in this RPC are not
  /// managed by Code (ie. not a Timelock account), created externally and cannot
  /// be linked automatically (ie. authority derived off user 12 words).
  func linkAdditionalAccounts(request: Code_Account_V1_LinkAdditionalAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Account_V1_LinkAdditionalAccountsResponse>
}

extension Code_Account_V1_AccountProvider {
  public var serviceName: Substring {
    return Code_Account_V1_AccountServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IsCodeAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Account_V1_IsCodeAccountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Account_V1_IsCodeAccountResponse>(),
        interceptors: self.interceptors?.makeIsCodeAccountInterceptors() ?? [],
        userFunction: self.isCodeAccount(request:context:)
      )

    case "GetTokenAccountInfos":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Account_V1_GetTokenAccountInfosRequest>(),
        responseSerializer: ProtobufSerializer<Code_Account_V1_GetTokenAccountInfosResponse>(),
        interceptors: self.interceptors?.makeGetTokenAccountInfosInterceptors() ?? [],
        userFunction: self.getTokenAccountInfos(request:context:)
      )

    case "LinkAdditionalAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Account_V1_LinkAdditionalAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Account_V1_LinkAdditionalAccountsResponse>(),
        interceptors: self.interceptors?.makeLinkAdditionalAccountsInterceptors() ?? [],
        userFunction: self.linkAdditionalAccounts(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Account_V1_AccountAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Account_V1_AccountServerInterceptorFactoryProtocol? { get }

  /// IsCodeAccount returns whether an owner account is a Code account. This hints
  /// to the client whether the account can be logged in, used for making payments,
  /// etc.
  @Sendable func isCodeAccount(
    request: Code_Account_V1_IsCodeAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Account_V1_IsCodeAccountResponse

  /// GetTokenAccountInfos returns token account metadata relevant to the Code owner
  /// account.
  @Sendable func getTokenAccountInfos(
    request: Code_Account_V1_GetTokenAccountInfosRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Account_V1_GetTokenAccountInfosResponse

  /// LinkAdditionalAccounts allows a client to declare additional accounts to
  /// be tracked and used within Code. The accounts declared in this RPC are not
  /// managed by Code (ie. not a Timelock account), created externally and cannot
  /// be linked automatically (ie. authority derived off user 12 words).
  @Sendable func linkAdditionalAccounts(
    request: Code_Account_V1_LinkAdditionalAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Account_V1_LinkAdditionalAccountsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Account_V1_AccountAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Account_V1_AccountServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Account_V1_AccountServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Account_V1_AccountServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IsCodeAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Account_V1_IsCodeAccountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Account_V1_IsCodeAccountResponse>(),
        interceptors: self.interceptors?.makeIsCodeAccountInterceptors() ?? [],
        wrapping: self.isCodeAccount(request:context:)
      )

    case "GetTokenAccountInfos":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Account_V1_GetTokenAccountInfosRequest>(),
        responseSerializer: ProtobufSerializer<Code_Account_V1_GetTokenAccountInfosResponse>(),
        interceptors: self.interceptors?.makeGetTokenAccountInfosInterceptors() ?? [],
        wrapping: self.getTokenAccountInfos(request:context:)
      )

    case "LinkAdditionalAccounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Account_V1_LinkAdditionalAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Account_V1_LinkAdditionalAccountsResponse>(),
        interceptors: self.interceptors?.makeLinkAdditionalAccountsInterceptors() ?? [],
        wrapping: self.linkAdditionalAccounts(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Code_Account_V1_AccountServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'isCodeAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIsCodeAccountInterceptors() -> [ServerInterceptor<Code_Account_V1_IsCodeAccountRequest, Code_Account_V1_IsCodeAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getTokenAccountInfos'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTokenAccountInfosInterceptors() -> [ServerInterceptor<Code_Account_V1_GetTokenAccountInfosRequest, Code_Account_V1_GetTokenAccountInfosResponse>]

  /// - Returns: Interceptors to use when handling 'linkAdditionalAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkAdditionalAccountsInterceptors() -> [ServerInterceptor<Code_Account_V1_LinkAdditionalAccountsRequest, Code_Account_V1_LinkAdditionalAccountsResponse>]
}

public enum Code_Account_V1_AccountServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Account",
    fullName: "code.account.v1.Account",
    methods: [
      Code_Account_V1_AccountServerMetadata.Methods.isCodeAccount,
      Code_Account_V1_AccountServerMetadata.Methods.getTokenAccountInfos,
      Code_Account_V1_AccountServerMetadata.Methods.linkAdditionalAccounts,
    ]
  )

  public enum Methods {
    public static let isCodeAccount = GRPCMethodDescriptor(
      name: "IsCodeAccount",
      path: "/code.account.v1.Account/IsCodeAccount",
      type: GRPCCallType.unary
    )

    public static let getTokenAccountInfos = GRPCMethodDescriptor(
      name: "GetTokenAccountInfos",
      path: "/code.account.v1.Account/GetTokenAccountInfos",
      type: GRPCCallType.unary
    )

    public static let linkAdditionalAccounts = GRPCMethodDescriptor(
      name: "LinkAdditionalAccounts",
      path: "/code.account.v1.Account/LinkAdditionalAccounts",
      type: GRPCCallType.unary
    )
  }
}
