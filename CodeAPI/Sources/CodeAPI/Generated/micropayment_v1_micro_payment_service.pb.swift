// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: micropayment/v1/micro_payment_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Code_Micropayment_V1_GetStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var intentID: Code_Common_V1_IntentId {
    get {return _intentID ?? Code_Common_V1_IntentId()}
    set {_intentID = newValue}
  }
  /// Returns true if `intentID` has been explicitly set.
  public var hasIntentID: Bool {return self._intentID != nil}
  /// Clears the value of `intentID`. Subsequent reads from it will return its default value.
  public mutating func clearIntentID() {self._intentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intentID: Code_Common_V1_IntentId? = nil
}

public struct Code_Micropayment_V1_GetStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var exists: Bool = false

  public var codeScanned: Bool = false

  public var intentSubmitted: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Code_Micropayment_V1_RegisterWebhookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var intentID: Code_Common_V1_IntentId {
    get {return _intentID ?? Code_Common_V1_IntentId()}
    set {_intentID = newValue}
  }
  /// Returns true if `intentID` has been explicitly set.
  public var hasIntentID: Bool {return self._intentID != nil}
  /// Clears the value of `intentID`. Subsequent reads from it will return its default value.
  public mutating func clearIntentID() {self._intentID = nil}

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intentID: Code_Common_V1_IntentId? = nil
}

public struct Code_Micropayment_V1_RegisterWebhookResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Code_Micropayment_V1_RegisterWebhookResponse.Result = .ok

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case ok // = 0
    case alreadyRegistered // = 1
    case paymentRequestNotFound // = 2
    case intentExists // = 3
    case invalidURL // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .ok
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .alreadyRegistered
      case 2: self = .paymentRequestNotFound
      case 3: self = .intentExists
      case 4: self = .invalidURL
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .ok: return 0
      case .alreadyRegistered: return 1
      case .paymentRequestNotFound: return 2
      case .intentExists: return 3
      case .invalidURL: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Code_Micropayment_V1_RegisterWebhookResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Code_Micropayment_V1_RegisterWebhookResponse.Result] = [
    .ok,
    .alreadyRegistered,
    .paymentRequestNotFound,
    .intentExists,
    .invalidURL,
  ]
}

#endif  // swift(>=4.2)

public struct Code_Micropayment_V1_CodifyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The URL to codify
  public var url: String = String()

  /// ISO 4217 alpha-3 currency code the payment should be made in
  public var currency: String = String()

  /// The amount that should be paid in the native currency
  public var nativeAmount: Double = 0

  /// The verified owner account public key
  public var ownerAccount: Code_Common_V1_SolanaAccountId {
    get {return _ownerAccount ?? Code_Common_V1_SolanaAccountId()}
    set {_ownerAccount = newValue}
  }
  /// Returns true if `ownerAccount` has been explicitly set.
  public var hasOwnerAccount: Bool {return self._ownerAccount != nil}
  /// Clears the value of `ownerAccount`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerAccount() {self._ownerAccount = nil}

  /// The primary account public key where payment will be sent
  public var primaryAccount: Code_Common_V1_SolanaAccountId {
    get {return _primaryAccount ?? Code_Common_V1_SolanaAccountId()}
    set {_primaryAccount = newValue}
  }
  /// Returns true if `primaryAccount` has been explicitly set.
  public var hasPrimaryAccount: Bool {return self._primaryAccount != nil}
  /// Clears the value of `primaryAccount`. Subsequent reads from it will return its default value.
  public mutating func clearPrimaryAccount() {self._primaryAccount = nil}

  /// The signature is of serialize(CodifyRequest) without this field set using the
  /// private key of the owner account. This provides an authentication mechanism
  /// to the RPC and can be used to validate payment details.
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ownerAccount: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _primaryAccount: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
}

public struct Code_Micropayment_V1_CodifyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Code_Micropayment_V1_CodifyResponse.Result = .ok

  public var codifiedURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case ok // = 0
    case invalidURL // = 1
    case invalidAccount // = 2
    case unsupportedCurrency // = 3
    case nativeAmountExceedsLimit // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .ok
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .invalidURL
      case 2: self = .invalidAccount
      case 3: self = .unsupportedCurrency
      case 4: self = .nativeAmountExceedsLimit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .ok: return 0
      case .invalidURL: return 1
      case .invalidAccount: return 2
      case .unsupportedCurrency: return 3
      case .nativeAmountExceedsLimit: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Code_Micropayment_V1_CodifyResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Code_Micropayment_V1_CodifyResponse.Result] = [
    .ok,
    .invalidURL,
    .invalidAccount,
    .unsupportedCurrency,
    .nativeAmountExceedsLimit,
  ]
}

#endif  // swift(>=4.2)

public struct Code_Micropayment_V1_GetPathMetadataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var path: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Code_Micropayment_V1_GetPathMetadataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Code_Micropayment_V1_GetPathMetadataResponse.Result = .ok

  /// The account where the payment should be sent to
  public var destination: Code_Common_V1_SolanaAccountId {
    get {return _destination ?? Code_Common_V1_SolanaAccountId()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {self._destination = nil}

  /// ISO 4217 alpha-3 currency code the payment should be made in
  public var currency: String = String()

  /// The amount that should be paid in the native currency
  public var nativeAmount: Double = 0

  /// The URL to redirect upon successful payment
  public var redirctURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case ok // = 0
    case notFound // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .ok
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .notFound
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .ok: return 0
      case .notFound: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _destination: Code_Common_V1_SolanaAccountId? = nil
}

#if swift(>=4.2)

extension Code_Micropayment_V1_GetPathMetadataResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Code_Micropayment_V1_GetPathMetadataResponse.Result] = [
    .ok,
    .notFound,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Code_Micropayment_V1_GetStatusRequest: @unchecked Sendable {}
extension Code_Micropayment_V1_GetStatusResponse: @unchecked Sendable {}
extension Code_Micropayment_V1_RegisterWebhookRequest: @unchecked Sendable {}
extension Code_Micropayment_V1_RegisterWebhookResponse: @unchecked Sendable {}
extension Code_Micropayment_V1_RegisterWebhookResponse.Result: @unchecked Sendable {}
extension Code_Micropayment_V1_CodifyRequest: @unchecked Sendable {}
extension Code_Micropayment_V1_CodifyResponse: @unchecked Sendable {}
extension Code_Micropayment_V1_CodifyResponse.Result: @unchecked Sendable {}
extension Code_Micropayment_V1_GetPathMetadataRequest: @unchecked Sendable {}
extension Code_Micropayment_V1_GetPathMetadataResponse: @unchecked Sendable {}
extension Code_Micropayment_V1_GetPathMetadataResponse.Result: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "code.micropayment.v1"

extension Code_Micropayment_V1_GetStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "intent_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._intentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_GetStatusRequest, rhs: Code_Micropayment_V1_GetStatusRequest) -> Bool {
    if lhs._intentID != rhs._intentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_GetStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exists"),
    2: .standard(proto: "code_scanned"),
    3: .standard(proto: "intent_submitted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.exists) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.codeScanned) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.intentSubmitted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.exists != false {
      try visitor.visitSingularBoolField(value: self.exists, fieldNumber: 1)
    }
    if self.codeScanned != false {
      try visitor.visitSingularBoolField(value: self.codeScanned, fieldNumber: 2)
    }
    if self.intentSubmitted != false {
      try visitor.visitSingularBoolField(value: self.intentSubmitted, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_GetStatusResponse, rhs: Code_Micropayment_V1_GetStatusResponse) -> Bool {
    if lhs.exists != rhs.exists {return false}
    if lhs.codeScanned != rhs.codeScanned {return false}
    if lhs.intentSubmitted != rhs.intentSubmitted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_RegisterWebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterWebhookRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "intent_id"),
    2: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._intentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_RegisterWebhookRequest, rhs: Code_Micropayment_V1_RegisterWebhookRequest) -> Bool {
    if lhs._intentID != rhs._intentID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_RegisterWebhookResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterWebhookResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .ok {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_RegisterWebhookResponse, rhs: Code_Micropayment_V1_RegisterWebhookResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_RegisterWebhookResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "ALREADY_REGISTERED"),
    2: .same(proto: "PAYMENT_REQUEST_NOT_FOUND"),
    3: .same(proto: "INTENT_EXISTS"),
    4: .same(proto: "INVALID_URL"),
  ]
}

extension Code_Micropayment_V1_CodifyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodifyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "currency"),
    3: .standard(proto: "native_amount"),
    4: .standard(proto: "owner_account"),
    5: .standard(proto: "primary_account"),
    6: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.nativeAmount) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ownerAccount) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._primaryAccount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 2)
    }
    if self.nativeAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.nativeAmount, fieldNumber: 3)
    }
    try { if let v = self._ownerAccount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._primaryAccount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_CodifyRequest, rhs: Code_Micropayment_V1_CodifyRequest) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.nativeAmount != rhs.nativeAmount {return false}
    if lhs._ownerAccount != rhs._ownerAccount {return false}
    if lhs._primaryAccount != rhs._primaryAccount {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_CodifyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodifyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "codified_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.codifiedURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .ok {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.codifiedURL.isEmpty {
      try visitor.visitSingularStringField(value: self.codifiedURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_CodifyResponse, rhs: Code_Micropayment_V1_CodifyResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.codifiedURL != rhs.codifiedURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_CodifyResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "INVALID_URL"),
    2: .same(proto: "INVALID_ACCOUNT"),
    3: .same(proto: "UNSUPPORTED_CURRENCY"),
    4: .same(proto: "NATIVE_AMOUNT_EXCEEDS_LIMIT"),
  ]
}

extension Code_Micropayment_V1_GetPathMetadataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPathMetadataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_GetPathMetadataRequest, rhs: Code_Micropayment_V1_GetPathMetadataRequest) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_GetPathMetadataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPathMetadataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "destination"),
    3: .same(proto: "currency"),
    4: .standard(proto: "native_amount"),
    5: .standard(proto: "redirct_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.nativeAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.redirctURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.result != .ok {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try { if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 3)
    }
    if self.nativeAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.nativeAmount, fieldNumber: 4)
    }
    if !self.redirctURL.isEmpty {
      try visitor.visitSingularStringField(value: self.redirctURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Micropayment_V1_GetPathMetadataResponse, rhs: Code_Micropayment_V1_GetPathMetadataResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.nativeAmount != rhs.nativeAmount {return false}
    if lhs.redirctURL != rhs.redirctURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Micropayment_V1_GetPathMetadataResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NOT_FOUND"),
  ]
}
