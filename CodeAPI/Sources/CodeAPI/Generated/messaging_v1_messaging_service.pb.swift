// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messaging/v1/messaging_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Code_Messaging_V1_OpenMessageStreamRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  /// The signature is of serialize(OpenMessageStreamRequest) using rendezvous_key.
  ///
  /// todo: Make required once clients migrate
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
}

public struct Code_Messaging_V1_OpenMessageStreamResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messages: [Code_Messaging_V1_Message] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requestOrPong: Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest.OneOf_RequestOrPong? = nil

  public var request: Code_Messaging_V1_OpenMessageStreamRequest {
    get {
      if case .request(let v)? = requestOrPong {return v}
      return Code_Messaging_V1_OpenMessageStreamRequest()
    }
    set {requestOrPong = .request(newValue)}
  }

  public var pong: Code_Messaging_V1_ClientPong {
    get {
      if case .pong(let v)? = requestOrPong {return v}
      return Code_Messaging_V1_ClientPong()
    }
    set {requestOrPong = .pong(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_RequestOrPong: Equatable {
    case request(Code_Messaging_V1_OpenMessageStreamRequest)
    case pong(Code_Messaging_V1_ClientPong)

  #if !swift(>=4.1)
    public static func ==(lhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest.OneOf_RequestOrPong, rhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest.OneOf_RequestOrPong) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.request, .request): return {
        guard case .request(let l) = lhs, case .request(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pong, .pong): return {
        guard case .pong(let l) = lhs, case .pong(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responseOrPing: Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse.OneOf_ResponseOrPing? = nil

  public var response: Code_Messaging_V1_OpenMessageStreamResponse {
    get {
      if case .response(let v)? = responseOrPing {return v}
      return Code_Messaging_V1_OpenMessageStreamResponse()
    }
    set {responseOrPing = .response(newValue)}
  }

  public var ping: Code_Messaging_V1_ServerPing {
    get {
      if case .ping(let v)? = responseOrPing {return v}
      return Code_Messaging_V1_ServerPing()
    }
    set {responseOrPing = .ping(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ResponseOrPing: Equatable {
    case response(Code_Messaging_V1_OpenMessageStreamResponse)
    case ping(Code_Messaging_V1_ServerPing)

  #if !swift(>=4.1)
    public static func ==(lhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse.OneOf_ResponseOrPing, rhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse.OneOf_ResponseOrPing) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.response, .response): return {
        guard case .response(let l) = lhs, case .response(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ping, .ping): return {
        guard case .ping(let l) = lhs, case .ping(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Code_Messaging_V1_PollMessagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  /// The signature is of serialize(PollMessagesRequest) using rendezvous_key.
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
}

public struct Code_Messaging_V1_PollMessagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messages: [Code_Messaging_V1_Message] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Code_Messaging_V1_AckMessagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  public var messageIds: [Code_Messaging_V1_MessageId] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
}

public struct Code_Messaging_V1_AckMesssagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Code_Messaging_V1_AckMesssagesResponse.Result = .ok

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case ok // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .ok
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .ok: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Code_Messaging_V1_AckMesssagesResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Code_Messaging_V1_AckMesssagesResponse.Result] = [
    .ok,
  ]
}

#endif  // swift(>=4.2)

public struct Code_Messaging_V1_SendMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The message to send. Types of messages clients can send are restricted.
  public var message: Code_Messaging_V1_Message {
    get {return _message ?? Code_Messaging_V1_Message()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {self._message = nil}

  /// The rendezvous key that the message should be routed to.
  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  /// The signature is of serialize(Message) using the PrivateKey of the keypair.
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _message: Code_Messaging_V1_Message? = nil
  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
}

public struct Code_Messaging_V1_SendMessageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Code_Messaging_V1_SendMessageResponse.Result = .ok

  /// Set if result == OK.
  public var messageID: Code_Messaging_V1_MessageId {
    get {return _messageID ?? Code_Messaging_V1_MessageId()}
    set {_messageID = newValue}
  }
  /// Returns true if `messageID` has been explicitly set.
  public var hasMessageID: Bool {return self._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
  public mutating func clearMessageID() {self._messageID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case ok // = 0
    case noActiveStream // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .ok
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .noActiveStream
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .ok: return 0
      case .noActiveStream: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _messageID: Code_Messaging_V1_MessageId? = nil
}

#if swift(>=4.2)

extension Code_Messaging_V1_SendMessageResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Code_Messaging_V1_SendMessageResponse.Result] = [
    .ok,
    .noActiveStream,
  ]
}

#endif  // swift(>=4.2)

/// MessageId identifies a message. It is only guaranteed to be unique when
/// paired with a destination (i.e. the rendezvous public key).
public struct Code_Messaging_V1_MessageId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request that a pulled out bill be sent to the requested address.
///
/// This message type is only initiated by clients.
public struct Code_Messaging_V1_RequestToGrabBill {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Requestor is the Kin token account on Solana to which a payment should be sent.
  public var requestorAccount: Code_Common_V1_SolanaAccountId {
    get {return _requestorAccount ?? Code_Common_V1_SolanaAccountId()}
    set {_requestorAccount = newValue}
  }
  /// Returns true if `requestorAccount` has been explicitly set.
  public var hasRequestorAccount: Bool {return self._requestorAccount != nil}
  /// Clears the value of `requestorAccount`. Subsequent reads from it will return its default value.
  public mutating func clearRequestorAccount() {self._requestorAccount = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestorAccount: Code_Common_V1_SolanaAccountId? = nil
}

/// Request that a bill of a requested value is created and sent to the requested
/// address.
///
/// This message type is only initiated by clients.
public struct Code_Messaging_V1_RequestToReceiveBill {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Requestor is the Kin token account on Solana to which a payment should be sent.
  public var requestorAccount: Code_Common_V1_SolanaAccountId {
    get {return _requestorAccount ?? Code_Common_V1_SolanaAccountId()}
    set {_requestorAccount = newValue}
  }
  /// Returns true if `requestorAccount` has been explicitly set.
  public var hasRequestorAccount: Bool {return self._requestorAccount != nil}
  /// Clears the value of `requestorAccount`. Subsequent reads from it will return its default value.
  public mutating func clearRequestorAccount() {self._requestorAccount = nil}

  /// The exchange data for the requested bill value.
  public var exchangeData: Code_Messaging_V1_RequestToReceiveBill.OneOf_ExchangeData? = nil

  /// An exact amount of Kin. Payment is guaranteed to transfer the specified
  /// quarks in the requested currency and exchange rate.
  ///
  /// Only supports Kin. Use exchange_data.partial for fiat amounts.
  public var exact: Code_Transaction_V2_ExchangeData {
    get {
      if case .exact(let v)? = exchangeData {return v}
      return Code_Transaction_V2_ExchangeData()
    }
    set {exchangeData = .exact(newValue)}
  }

  /// Fiat amount request. The amount of Kin is determined at time of payment
  /// with a recent exchange rate provided by the paying client and validatd
  /// by server.
  ///
  /// Only supports fiat amounts. Use exchange_data.exact for Kin.
  public var partial: Code_Transaction_V2_ExchangeDataWithoutRate {
    get {
      if case .partial(let v)? = exchangeData {return v}
      return Code_Transaction_V2_ExchangeDataWithoutRate()
    }
    set {exchangeData = .partial(newValue)}
  }

  /// The third-party's domain name, which is its primary identifier. Server
  /// guarantees to perform domain verification against the verifier account.
  public var domain: Code_Common_V1_Domain {
    get {return _domain ?? Code_Common_V1_Domain()}
    set {_domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  public var hasDomain: Bool {return self._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  public mutating func clearDomain() {self._domain = nil}

  /// Owner account owned by the third party used in domain verification.
  public var verifier: Code_Common_V1_SolanaAccountId {
    get {return _verifier ?? Code_Common_V1_SolanaAccountId()}
    set {_verifier = newValue}
  }
  /// Returns true if `verifier` has been explicitly set.
  public var hasVerifier: Bool {return self._verifier != nil}
  /// Clears the value of `verifier`. Subsequent reads from it will return its default value.
  public mutating func clearVerifier() {self._verifier = nil}

  /// Signature of this message using the verifier private key, which in addition
  /// to domain verification, authenticates the third party.
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  /// Rendezvous key to avoid replay attacks
  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The exchange data for the requested bill value.
  public enum OneOf_ExchangeData: Equatable {
    /// An exact amount of Kin. Payment is guaranteed to transfer the specified
    /// quarks in the requested currency and exchange rate.
    ///
    /// Only supports Kin. Use exchange_data.partial for fiat amounts.
    case exact(Code_Transaction_V2_ExchangeData)
    /// Fiat amount request. The amount of Kin is determined at time of payment
    /// with a recent exchange rate provided by the paying client and validatd
    /// by server.
    ///
    /// Only supports fiat amounts. Use exchange_data.exact for Kin.
    case partial(Code_Transaction_V2_ExchangeDataWithoutRate)

  #if !swift(>=4.1)
    public static func ==(lhs: Code_Messaging_V1_RequestToReceiveBill.OneOf_ExchangeData, rhs: Code_Messaging_V1_RequestToReceiveBill.OneOf_ExchangeData) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.exact, .exact): return {
        guard case .exact(let l) = lhs, case .exact(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.partial, .partial): return {
        guard case .partial(let l) = lhs, case .partial(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _requestorAccount: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _domain: Code_Common_V1_Domain? = nil
  fileprivate var _verifier: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
}

/// A status update on a stream to indicate a scan code was scanned. This can appear
/// multiple times for the same stream.
///
/// This message type is only initiated by client
public struct Code_Messaging_V1_CodeScanned {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp the client scanned the code
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Payment is rejected by the client
///
/// This message type is only initiated by clients
public struct Code_Messaging_V1_ClientRejectedPayment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var intentID: Code_Common_V1_IntentId {
    get {return _intentID ?? Code_Common_V1_IntentId()}
    set {_intentID = newValue}
  }
  /// Returns true if `intentID` has been explicitly set.
  public var hasIntentID: Bool {return self._intentID != nil}
  /// Clears the value of `intentID`. Subsequent reads from it will return its default value.
  public mutating func clearIntentID() {self._intentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intentID: Code_Common_V1_IntentId? = nil
}

/// Intent was submitted via SubmitIntent
///
/// This message type is only initiated by server
public struct Code_Messaging_V1_IntentSubmitted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var intentID: Code_Common_V1_IntentId {
    get {return _intentID ?? Code_Common_V1_IntentId()}
    set {_intentID = newValue}
  }
  /// Returns true if `intentID` has been explicitly set.
  public var hasIntentID: Bool {return self._intentID != nil}
  /// Clears the value of `intentID`. Subsequent reads from it will return its default value.
  public mutating func clearIntentID() {self._intentID = nil}

  public var metadata: Code_Transaction_V2_Metadata {
    get {return _metadata ?? Code_Transaction_V2_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _intentID: Code_Common_V1_IntentId? = nil
  fileprivate var _metadata: Code_Transaction_V2_Metadata? = nil
}

/// Webhook was successfully called
///
/// This message type is only initiated by server
public struct Code_Messaging_V1_WebhookCalled {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Estimated time webhook was received
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Request that an account logs in
///
/// This message type is only initiated by third-parties through the SDK.
public struct Code_Messaging_V1_RequestToLogin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The third-party's domain name, which is its primary identifier. Server
  /// guarantees to perform domain verification against the verifier account.
  ///
  /// Clients should expect subdomains for future feature compatiblity, but must
  /// use the ASCII base domain in the account derivation strategy.
  public var domain: Code_Common_V1_Domain {
    get {return _domain ?? Code_Common_V1_Domain()}
    set {_domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  public var hasDomain: Bool {return self._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  public mutating func clearDomain() {self._domain = nil}

  /// Random nonce to include for signing in LoginAttempt
  public var nonce: Code_Common_V1_SolanaAccountId {
    get {return _nonce ?? Code_Common_V1_SolanaAccountId()}
    set {_nonce = newValue}
  }
  /// Returns true if `nonce` has been explicitly set.
  public var hasNonce: Bool {return self._nonce != nil}
  /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
  public mutating func clearNonce() {self._nonce = nil}

  /// Timestamp the request was created
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// Owner account owned by the third party used in domain verification.
  public var verifier: Code_Common_V1_SolanaAccountId {
    get {return _verifier ?? Code_Common_V1_SolanaAccountId()}
    set {_verifier = newValue}
  }
  /// Returns true if `verifier` has been explicitly set.
  public var hasVerifier: Bool {return self._verifier != nil}
  /// Clears the value of `verifier`. Subsequent reads from it will return its default value.
  public mutating func clearVerifier() {self._verifier = nil}

  /// Signature of this message using the verifier private key, which in addition
  /// to domain verification, authenticates the third party.
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  /// Rendezvous key to avoid replay attacks
  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _domain: Code_Common_V1_Domain? = nil
  fileprivate var _nonce: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _verifier: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
}

/// Attempt to login
///
/// This message type is only initiated by user clients
public struct Code_Messaging_V1_LoginAttempt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Derived owner account from a user's 12 words, which is uniquely used with
  /// the third party as identified by the domain.
  public var userID: Code_Common_V1_SolanaAccountId {
    get {return _userID ?? Code_Common_V1_SolanaAccountId()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  public var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  public mutating func clearUserID() {self._userID = nil}

  /// Domain value provided in the RequestToLogin message
  public var domain: Code_Common_V1_Domain {
    get {return _domain ?? Code_Common_V1_Domain()}
    set {_domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  public var hasDomain: Bool {return self._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  public mutating func clearDomain() {self._domain = nil}

  /// Nonce value provided in the RequestToLogin message
  public var nonce: Code_Common_V1_SolanaAccountId {
    get {return _nonce ?? Code_Common_V1_SolanaAccountId()}
    set {_nonce = newValue}
  }
  /// Returns true if `nonce` has been explicitly set.
  public var hasNonce: Bool {return self._nonce != nil}
  /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
  public mutating func clearNonce() {self._nonce = nil}

  /// Timestamp the attempt was created
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// Signature of this message using the user_id private key, which
  /// authenticates the user.
  public var signature: Code_Common_V1_Signature {
    get {return _signature ?? Code_Common_V1_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  /// Rendezvous key to avoid replay attacks
  public var rendezvousKey: Code_Messaging_V1_RendezvousKey {
    get {return _rendezvousKey ?? Code_Messaging_V1_RendezvousKey()}
    set {_rendezvousKey = newValue}
  }
  /// Returns true if `rendezvousKey` has been explicitly set.
  public var hasRendezvousKey: Bool {return self._rendezvousKey != nil}
  /// Clears the value of `rendezvousKey`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousKey() {self._rendezvousKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userID: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _domain: Code_Common_V1_Domain? = nil
  fileprivate var _nonce: Code_Common_V1_SolanaAccountId? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _signature: Code_Common_V1_Signature? = nil
  fileprivate var _rendezvousKey: Code_Messaging_V1_RendezvousKey? = nil
}

public struct Code_Messaging_V1_LoginRejected {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp the login was rejected
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Client has received an aidrop from server
///
/// This message type is only initiated by server.
public struct Code_Messaging_V1_AirdropReceived {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of airdrop received
  public var airdropType: Code_Transaction_V2_AirdropType = .unknown

  /// Exchange data relating to the amount of Kin and fiat value of the airdrop
  public var exchangeData: Code_Transaction_V2_ExchangeData {
    get {return _exchangeData ?? Code_Transaction_V2_ExchangeData()}
    set {_exchangeData = newValue}
  }
  /// Returns true if `exchangeData` has been explicitly set.
  public var hasExchangeData: Bool {return self._exchangeData != nil}
  /// Clears the value of `exchangeData`. Subsequent reads from it will return its default value.
  public mutating func clearExchangeData() {self._exchangeData = nil}

  /// Time the airdrop was received
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _exchangeData: Code_Transaction_V2_ExchangeData? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Code_Messaging_V1_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// MessageId is the Id of the message. This ID is generated by the
  /// server, and will _always_ be set when receiving a message.
  ///
  /// Server generates the message to:
  ///     1. Reserve the ability for any future ID changes
  ///     2. Prevent clients attempting to collide message IDs.
  public var id: Code_Messaging_V1_MessageId {
    get {return _id ?? Code_Messaging_V1_MessageId()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  /// The signature sent from SendMessageRequest, which will be injected by server.
  /// This enables clients to ensure no MITM attacks were performed to hijack contents
  /// of the typed message. This is only applicable for messages not generated by server.
  public var sendMessageRequestSignature: Code_Common_V1_Signature {
    get {return _sendMessageRequestSignature ?? Code_Common_V1_Signature()}
    set {_sendMessageRequestSignature = newValue}
  }
  /// Returns true if `sendMessageRequestSignature` has been explicitly set.
  public var hasSendMessageRequestSignature: Bool {return self._sendMessageRequestSignature != nil}
  /// Clears the value of `sendMessageRequestSignature`. Subsequent reads from it will return its default value.
  public mutating func clearSendMessageRequestSignature() {self._sendMessageRequestSignature = nil}

  /// Next field number is 13
  public var kind: Code_Messaging_V1_Message.OneOf_Kind? = nil

  public var requestToGrabBill: Code_Messaging_V1_RequestToGrabBill {
    get {
      if case .requestToGrabBill(let v)? = kind {return v}
      return Code_Messaging_V1_RequestToGrabBill()
    }
    set {kind = .requestToGrabBill(newValue)}
  }

  public var requestToReceiveBill: Code_Messaging_V1_RequestToReceiveBill {
    get {
      if case .requestToReceiveBill(let v)? = kind {return v}
      return Code_Messaging_V1_RequestToReceiveBill()
    }
    set {kind = .requestToReceiveBill(newValue)}
  }

  public var codeScanned: Code_Messaging_V1_CodeScanned {
    get {
      if case .codeScanned(let v)? = kind {return v}
      return Code_Messaging_V1_CodeScanned()
    }
    set {kind = .codeScanned(newValue)}
  }

  public var clientRejectedPayment: Code_Messaging_V1_ClientRejectedPayment {
    get {
      if case .clientRejectedPayment(let v)? = kind {return v}
      return Code_Messaging_V1_ClientRejectedPayment()
    }
    set {kind = .clientRejectedPayment(newValue)}
  }

  public var intentSubmitted: Code_Messaging_V1_IntentSubmitted {
    get {
      if case .intentSubmitted(let v)? = kind {return v}
      return Code_Messaging_V1_IntentSubmitted()
    }
    set {kind = .intentSubmitted(newValue)}
  }

  public var webhookCalled: Code_Messaging_V1_WebhookCalled {
    get {
      if case .webhookCalled(let v)? = kind {return v}
      return Code_Messaging_V1_WebhookCalled()
    }
    set {kind = .webhookCalled(newValue)}
  }

  public var requestToLogin: Code_Messaging_V1_RequestToLogin {
    get {
      if case .requestToLogin(let v)? = kind {return v}
      return Code_Messaging_V1_RequestToLogin()
    }
    set {kind = .requestToLogin(newValue)}
  }

  public var loginAttempt: Code_Messaging_V1_LoginAttempt {
    get {
      if case .loginAttempt(let v)? = kind {return v}
      return Code_Messaging_V1_LoginAttempt()
    }
    set {kind = .loginAttempt(newValue)}
  }

  public var loginRejected: Code_Messaging_V1_LoginRejected {
    get {
      if case .loginRejected(let v)? = kind {return v}
      return Code_Messaging_V1_LoginRejected()
    }
    set {kind = .loginRejected(newValue)}
  }

  public var airdropReceived: Code_Messaging_V1_AirdropReceived {
    get {
      if case .airdropReceived(let v)? = kind {return v}
      return Code_Messaging_V1_AirdropReceived()
    }
    set {kind = .airdropReceived(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Next field number is 13
  public enum OneOf_Kind: Equatable {
    case requestToGrabBill(Code_Messaging_V1_RequestToGrabBill)
    case requestToReceiveBill(Code_Messaging_V1_RequestToReceiveBill)
    case codeScanned(Code_Messaging_V1_CodeScanned)
    case clientRejectedPayment(Code_Messaging_V1_ClientRejectedPayment)
    case intentSubmitted(Code_Messaging_V1_IntentSubmitted)
    case webhookCalled(Code_Messaging_V1_WebhookCalled)
    case requestToLogin(Code_Messaging_V1_RequestToLogin)
    case loginAttempt(Code_Messaging_V1_LoginAttempt)
    case loginRejected(Code_Messaging_V1_LoginRejected)
    case airdropReceived(Code_Messaging_V1_AirdropReceived)

  #if !swift(>=4.1)
    public static func ==(lhs: Code_Messaging_V1_Message.OneOf_Kind, rhs: Code_Messaging_V1_Message.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.requestToGrabBill, .requestToGrabBill): return {
        guard case .requestToGrabBill(let l) = lhs, case .requestToGrabBill(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.requestToReceiveBill, .requestToReceiveBill): return {
        guard case .requestToReceiveBill(let l) = lhs, case .requestToReceiveBill(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.codeScanned, .codeScanned): return {
        guard case .codeScanned(let l) = lhs, case .codeScanned(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.clientRejectedPayment, .clientRejectedPayment): return {
        guard case .clientRejectedPayment(let l) = lhs, case .clientRejectedPayment(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.intentSubmitted, .intentSubmitted): return {
        guard case .intentSubmitted(let l) = lhs, case .intentSubmitted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.webhookCalled, .webhookCalled): return {
        guard case .webhookCalled(let l) = lhs, case .webhookCalled(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.requestToLogin, .requestToLogin): return {
        guard case .requestToLogin(let l) = lhs, case .requestToLogin(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.loginAttempt, .loginAttempt): return {
        guard case .loginAttempt(let l) = lhs, case .loginAttempt(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.loginRejected, .loginRejected): return {
        guard case .loginRejected(let l) = lhs, case .loginRejected(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.airdropReceived, .airdropReceived): return {
        guard case .airdropReceived(let l) = lhs, case .airdropReceived(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _id: Code_Messaging_V1_MessageId? = nil
  fileprivate var _sendMessageRequestSignature: Code_Common_V1_Signature? = nil
}

public struct Code_Messaging_V1_RendezvousKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Code_Messaging_V1_ServerPing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp the ping was sent on the stream, for client to get a sense
  /// of potential network latency
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// The delay server will apply before sending the next ping
  public var pingDelay: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _pingDelay ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_pingDelay = newValue}
  }
  /// Returns true if `pingDelay` has been explicitly set.
  public var hasPingDelay: Bool {return self._pingDelay != nil}
  /// Clears the value of `pingDelay`. Subsequent reads from it will return its default value.
  public mutating func clearPingDelay() {self._pingDelay = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _pingDelay: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

public struct Code_Messaging_V1_ClientPong {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp the Pong was sent on the stream, for server to get a sense
  /// of potential network latency
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Code_Messaging_V1_OpenMessageStreamRequest: @unchecked Sendable {}
extension Code_Messaging_V1_OpenMessageStreamResponse: @unchecked Sendable {}
extension Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest: @unchecked Sendable {}
extension Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest.OneOf_RequestOrPong: @unchecked Sendable {}
extension Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse: @unchecked Sendable {}
extension Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse.OneOf_ResponseOrPing: @unchecked Sendable {}
extension Code_Messaging_V1_PollMessagesRequest: @unchecked Sendable {}
extension Code_Messaging_V1_PollMessagesResponse: @unchecked Sendable {}
extension Code_Messaging_V1_AckMessagesRequest: @unchecked Sendable {}
extension Code_Messaging_V1_AckMesssagesResponse: @unchecked Sendable {}
extension Code_Messaging_V1_AckMesssagesResponse.Result: @unchecked Sendable {}
extension Code_Messaging_V1_SendMessageRequest: @unchecked Sendable {}
extension Code_Messaging_V1_SendMessageResponse: @unchecked Sendable {}
extension Code_Messaging_V1_SendMessageResponse.Result: @unchecked Sendable {}
extension Code_Messaging_V1_MessageId: @unchecked Sendable {}
extension Code_Messaging_V1_RequestToGrabBill: @unchecked Sendable {}
extension Code_Messaging_V1_RequestToReceiveBill: @unchecked Sendable {}
extension Code_Messaging_V1_RequestToReceiveBill.OneOf_ExchangeData: @unchecked Sendable {}
extension Code_Messaging_V1_CodeScanned: @unchecked Sendable {}
extension Code_Messaging_V1_ClientRejectedPayment: @unchecked Sendable {}
extension Code_Messaging_V1_IntentSubmitted: @unchecked Sendable {}
extension Code_Messaging_V1_WebhookCalled: @unchecked Sendable {}
extension Code_Messaging_V1_RequestToLogin: @unchecked Sendable {}
extension Code_Messaging_V1_LoginAttempt: @unchecked Sendable {}
extension Code_Messaging_V1_LoginRejected: @unchecked Sendable {}
extension Code_Messaging_V1_AirdropReceived: @unchecked Sendable {}
extension Code_Messaging_V1_Message: @unchecked Sendable {}
extension Code_Messaging_V1_Message.OneOf_Kind: @unchecked Sendable {}
extension Code_Messaging_V1_RendezvousKey: @unchecked Sendable {}
extension Code_Messaging_V1_ServerPing: @unchecked Sendable {}
extension Code_Messaging_V1_ClientPong: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "code.messaging.v1"

extension Code_Messaging_V1_OpenMessageStreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenMessageStreamRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rendezvous_key"),
    2: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_OpenMessageStreamRequest, rhs: Code_Messaging_V1_OpenMessageStreamRequest) -> Bool {
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_OpenMessageStreamResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenMessageStreamResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_OpenMessageStreamResponse, rhs: Code_Messaging_V1_OpenMessageStreamResponse) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenMessageStreamWithKeepAliveRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "pong"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Code_Messaging_V1_OpenMessageStreamRequest?
        var hadOneofValue = false
        if let current = self.requestOrPong {
          hadOneofValue = true
          if case .request(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestOrPong = .request(v)
        }
      }()
      case 2: try {
        var v: Code_Messaging_V1_ClientPong?
        var hadOneofValue = false
        if let current = self.requestOrPong {
          hadOneofValue = true
          if case .pong(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestOrPong = .pong(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.requestOrPong {
    case .request?: try {
      guard case .request(let v)? = self.requestOrPong else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pong?: try {
      guard case .pong(let v)? = self.requestOrPong else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest, rhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveRequest) -> Bool {
    if lhs.requestOrPong != rhs.requestOrPong {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenMessageStreamWithKeepAliveResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
    2: .same(proto: "ping"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Code_Messaging_V1_OpenMessageStreamResponse?
        var hadOneofValue = false
        if let current = self.responseOrPing {
          hadOneofValue = true
          if case .response(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseOrPing = .response(v)
        }
      }()
      case 2: try {
        var v: Code_Messaging_V1_ServerPing?
        var hadOneofValue = false
        if let current = self.responseOrPing {
          hadOneofValue = true
          if case .ping(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.responseOrPing = .ping(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.responseOrPing {
    case .response?: try {
      guard case .response(let v)? = self.responseOrPing else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .ping?: try {
      guard case .ping(let v)? = self.responseOrPing else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse, rhs: Code_Messaging_V1_OpenMessageStreamWithKeepAliveResponse) -> Bool {
    if lhs.responseOrPing != rhs.responseOrPing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_PollMessagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PollMessagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rendezvous_key"),
    2: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_PollMessagesRequest, rhs: Code_Messaging_V1_PollMessagesRequest) -> Bool {
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_PollMessagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PollMessagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_PollMessagesResponse, rhs: Code_Messaging_V1_PollMessagesResponse) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_AckMessagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AckMessagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rendezvous_key"),
    2: .standard(proto: "message_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.messageIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.messageIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_AckMessagesRequest, rhs: Code_Messaging_V1_AckMessagesRequest) -> Bool {
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs.messageIds != rhs.messageIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_AckMesssagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AckMesssagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .ok {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_AckMesssagesResponse, rhs: Code_Messaging_V1_AckMesssagesResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_AckMesssagesResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
  ]
}

extension Code_Messaging_V1_SendMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendMessageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .standard(proto: "rendezvous_key"),
    3: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._message) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._message {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_SendMessageRequest, rhs: Code_Messaging_V1_SendMessageRequest) -> Bool {
    if lhs._message != rhs._message {return false}
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_SendMessageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendMessageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "message_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._messageID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.result != .ok {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try { if let v = self._messageID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_SendMessageResponse, rhs: Code_Messaging_V1_SendMessageResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._messageID != rhs._messageID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_SendMessageResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "NO_ACTIVE_STREAM"),
  ]
}

extension Code_Messaging_V1_MessageId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_MessageId, rhs: Code_Messaging_V1_MessageId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_RequestToGrabBill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestToGrabBill"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requestor_account"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._requestorAccount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._requestorAccount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_RequestToGrabBill, rhs: Code_Messaging_V1_RequestToGrabBill) -> Bool {
    if lhs._requestorAccount != rhs._requestorAccount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_RequestToReceiveBill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestToReceiveBill"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "requestor_account"),
    2: .same(proto: "exact"),
    3: .same(proto: "partial"),
    4: .same(proto: "domain"),
    5: .same(proto: "verifier"),
    6: .same(proto: "signature"),
    7: .standard(proto: "rendezvous_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._requestorAccount) }()
      case 2: try {
        var v: Code_Transaction_V2_ExchangeData?
        var hadOneofValue = false
        if let current = self.exchangeData {
          hadOneofValue = true
          if case .exact(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.exchangeData = .exact(v)
        }
      }()
      case 3: try {
        var v: Code_Transaction_V2_ExchangeDataWithoutRate?
        var hadOneofValue = false
        if let current = self.exchangeData {
          hadOneofValue = true
          if case .partial(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.exchangeData = .partial(v)
        }
      }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._domain) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._verifier) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._requestorAccount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.exchangeData {
    case .exact?: try {
      guard case .exact(let v)? = self.exchangeData else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .partial?: try {
      guard case .partial(let v)? = self.exchangeData else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try { if let v = self._domain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._verifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_RequestToReceiveBill, rhs: Code_Messaging_V1_RequestToReceiveBill) -> Bool {
    if lhs._requestorAccount != rhs._requestorAccount {return false}
    if lhs.exchangeData != rhs.exchangeData {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs._verifier != rhs._verifier {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_CodeScanned: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodeScanned"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_CodeScanned, rhs: Code_Messaging_V1_CodeScanned) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_ClientRejectedPayment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientRejectedPayment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "intent_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._intentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_ClientRejectedPayment, rhs: Code_Messaging_V1_ClientRejectedPayment) -> Bool {
    if lhs._intentID != rhs._intentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_IntentSubmitted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IntentSubmitted"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "intent_id"),
    2: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._intentID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._intentID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_IntentSubmitted, rhs: Code_Messaging_V1_IntentSubmitted) -> Bool {
    if lhs._intentID != rhs._intentID {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_WebhookCalled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WebhookCalled"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_WebhookCalled, rhs: Code_Messaging_V1_WebhookCalled) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_RequestToLogin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestToLogin"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "nonce"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "verifier"),
    5: .same(proto: "signature"),
    6: .standard(proto: "rendezvous_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._domain) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._nonce) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._verifier) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._domain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._nonce {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._verifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_RequestToLogin, rhs: Code_Messaging_V1_RequestToLogin) -> Bool {
    if lhs._domain != rhs._domain {return false}
    if lhs._nonce != rhs._nonce {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._verifier != rhs._verifier {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_LoginAttempt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoginAttempt"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    3: .same(proto: "domain"),
    4: .same(proto: "nonce"),
    5: .same(proto: "timestamp"),
    6: .same(proto: "signature"),
    7: .standard(proto: "rendezvous_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._userID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._domain) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._nonce) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._rendezvousKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._domain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._nonce {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._rendezvousKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_LoginAttempt, rhs: Code_Messaging_V1_LoginAttempt) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs._nonce != rhs._nonce {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs._rendezvousKey != rhs._rendezvousKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_LoginRejected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoginRejected"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_LoginRejected, rhs: Code_Messaging_V1_LoginRejected) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_AirdropReceived: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AirdropReceived"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "airdrop_type"),
    2: .standard(proto: "exchange_data"),
    3: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.airdropType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._exchangeData) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.airdropType != .unknown {
      try visitor.visitSingularEnumField(value: self.airdropType, fieldNumber: 1)
    }
    try { if let v = self._exchangeData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_AirdropReceived, rhs: Code_Messaging_V1_AirdropReceived) -> Bool {
    if lhs.airdropType != rhs.airdropType {return false}
    if lhs._exchangeData != rhs._exchangeData {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    3: .standard(proto: "send_message_request_signature"),
    2: .standard(proto: "request_to_grab_bill"),
    5: .standard(proto: "request_to_receive_bill"),
    6: .standard(proto: "code_scanned"),
    7: .standard(proto: "client_rejected_payment"),
    8: .standard(proto: "intent_submitted"),
    9: .standard(proto: "webhook_called"),
    10: .standard(proto: "request_to_login"),
    11: .standard(proto: "login_attempt"),
    12: .standard(proto: "login_rejected"),
    4: .standard(proto: "airdrop_received"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try {
        var v: Code_Messaging_V1_RequestToGrabBill?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .requestToGrabBill(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .requestToGrabBill(v)
        }
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sendMessageRequestSignature) }()
      case 4: try {
        var v: Code_Messaging_V1_AirdropReceived?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .airdropReceived(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .airdropReceived(v)
        }
      }()
      case 5: try {
        var v: Code_Messaging_V1_RequestToReceiveBill?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .requestToReceiveBill(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .requestToReceiveBill(v)
        }
      }()
      case 6: try {
        var v: Code_Messaging_V1_CodeScanned?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .codeScanned(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .codeScanned(v)
        }
      }()
      case 7: try {
        var v: Code_Messaging_V1_ClientRejectedPayment?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .clientRejectedPayment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .clientRejectedPayment(v)
        }
      }()
      case 8: try {
        var v: Code_Messaging_V1_IntentSubmitted?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .intentSubmitted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .intentSubmitted(v)
        }
      }()
      case 9: try {
        var v: Code_Messaging_V1_WebhookCalled?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .webhookCalled(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .webhookCalled(v)
        }
      }()
      case 10: try {
        var v: Code_Messaging_V1_RequestToLogin?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .requestToLogin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .requestToLogin(v)
        }
      }()
      case 11: try {
        var v: Code_Messaging_V1_LoginAttempt?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .loginAttempt(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .loginAttempt(v)
        }
      }()
      case 12: try {
        var v: Code_Messaging_V1_LoginRejected?
        var hadOneofValue = false
        if let current = self.kind {
          hadOneofValue = true
          if case .loginRejected(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.kind = .loginRejected(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if case .requestToGrabBill(let v)? = self.kind {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._sendMessageRequestSignature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    switch self.kind {
    case .airdropReceived?: try {
      guard case .airdropReceived(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .requestToReceiveBill?: try {
      guard case .requestToReceiveBill(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .codeScanned?: try {
      guard case .codeScanned(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .clientRejectedPayment?: try {
      guard case .clientRejectedPayment(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .intentSubmitted?: try {
      guard case .intentSubmitted(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .webhookCalled?: try {
      guard case .webhookCalled(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .requestToLogin?: try {
      guard case .requestToLogin(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .loginAttempt?: try {
      guard case .loginAttempt(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .loginRejected?: try {
      guard case .loginRejected(let v)? = self.kind else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_Message, rhs: Code_Messaging_V1_Message) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._sendMessageRequestSignature != rhs._sendMessageRequestSignature {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_RendezvousKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RendezvousKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_RendezvousKey, rhs: Code_Messaging_V1_RendezvousKey) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_ServerPing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServerPing"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "ping_delay"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pingDelay) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pingDelay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_ServerPing, rhs: Code_Messaging_V1_ServerPing) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._pingDelay != rhs._pingDelay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Code_Messaging_V1_ClientPong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientPong"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Code_Messaging_V1_ClientPong, rhs: Code_Messaging_V1_ClientPong) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
