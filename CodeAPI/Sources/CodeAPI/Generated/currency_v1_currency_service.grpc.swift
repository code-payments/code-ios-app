//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: currency/v1/currency_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Currency_V1_CurrencyClient`, then call methods of this protocol to make API calls.
public protocol Code_Currency_V1_CurrencyClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? { get }

  func getAllRates(
    _ request: Code_Currency_V1_GetAllRatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Currency_V1_GetAllRatesRequest, Code_Currency_V1_GetAllRatesResponse>
}

extension Code_Currency_V1_CurrencyClientProtocol {
  public var serviceName: String {
    return "code.currency.v1.Currency"
  }

  /// GetAllRates returns the exchange rates for Kin against all available currencies
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAllRates(
    _ request: Code_Currency_V1_GetAllRatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Currency_V1_GetAllRatesRequest, Code_Currency_V1_GetAllRatesResponse> {
    return self.makeUnaryCall(
      path: Code_Currency_V1_CurrencyClientMetadata.Methods.getAllRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllRatesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Code_Currency_V1_CurrencyClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Code_Currency_V1_CurrencyNIOClient")
public final class Code_Currency_V1_CurrencyClient: Code_Currency_V1_CurrencyClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.currency.v1.Currency service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Currency_V1_CurrencyNIOClient: Code_Currency_V1_CurrencyClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol?

  /// Creates a client for the code.currency.v1.Currency service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Currency_V1_CurrencyAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? { get }

  func makeGetAllRatesCall(
    _ request: Code_Currency_V1_GetAllRatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Currency_V1_GetAllRatesRequest, Code_Currency_V1_GetAllRatesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Currency_V1_CurrencyAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Currency_V1_CurrencyClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetAllRatesCall(
    _ request: Code_Currency_V1_GetAllRatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Currency_V1_GetAllRatesRequest, Code_Currency_V1_GetAllRatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Currency_V1_CurrencyClientMetadata.Methods.getAllRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllRatesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Currency_V1_CurrencyAsyncClientProtocol {
  public func getAllRates(
    _ request: Code_Currency_V1_GetAllRatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Currency_V1_GetAllRatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Currency_V1_CurrencyClientMetadata.Methods.getAllRates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllRatesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Currency_V1_CurrencyAsyncClient: Code_Currency_V1_CurrencyAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Code_Currency_V1_CurrencyClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getAllRates'.
  func makeGetAllRatesInterceptors() -> [ClientInterceptor<Code_Currency_V1_GetAllRatesRequest, Code_Currency_V1_GetAllRatesResponse>]
}

public enum Code_Currency_V1_CurrencyClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Currency",
    fullName: "code.currency.v1.Currency",
    methods: [
      Code_Currency_V1_CurrencyClientMetadata.Methods.getAllRates,
    ]
  )

  public enum Methods {
    public static let getAllRates = GRPCMethodDescriptor(
      name: "GetAllRates",
      path: "/code.currency.v1.Currency/GetAllRates",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Currency_V1_CurrencyProvider: CallHandlerProvider {
  var interceptors: Code_Currency_V1_CurrencyServerInterceptorFactoryProtocol? { get }

  /// GetAllRates returns the exchange rates for Kin against all available currencies
  func getAllRates(request: Code_Currency_V1_GetAllRatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Currency_V1_GetAllRatesResponse>
}

extension Code_Currency_V1_CurrencyProvider {
  public var serviceName: Substring {
    return Code_Currency_V1_CurrencyServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAllRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Currency_V1_GetAllRatesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Currency_V1_GetAllRatesResponse>(),
        interceptors: self.interceptors?.makeGetAllRatesInterceptors() ?? [],
        userFunction: self.getAllRates(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Currency_V1_CurrencyAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Currency_V1_CurrencyServerInterceptorFactoryProtocol? { get }

  /// GetAllRates returns the exchange rates for Kin against all available currencies
  func getAllRates(
    request: Code_Currency_V1_GetAllRatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Currency_V1_GetAllRatesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Currency_V1_CurrencyAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Currency_V1_CurrencyServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Currency_V1_CurrencyServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Currency_V1_CurrencyServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAllRates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Currency_V1_GetAllRatesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Currency_V1_GetAllRatesResponse>(),
        interceptors: self.interceptors?.makeGetAllRatesInterceptors() ?? [],
        wrapping: { try await self.getAllRates(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Code_Currency_V1_CurrencyServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getAllRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllRatesInterceptors() -> [ServerInterceptor<Code_Currency_V1_GetAllRatesRequest, Code_Currency_V1_GetAllRatesResponse>]
}

public enum Code_Currency_V1_CurrencyServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Currency",
    fullName: "code.currency.v1.Currency",
    methods: [
      Code_Currency_V1_CurrencyServerMetadata.Methods.getAllRates,
    ]
  )

  public enum Methods {
    public static let getAllRates = GRPCMethodDescriptor(
      name: "GetAllRates",
      path: "/code.currency.v1.Currency/GetAllRates",
      type: GRPCCallType.unary
    )
  }
}
