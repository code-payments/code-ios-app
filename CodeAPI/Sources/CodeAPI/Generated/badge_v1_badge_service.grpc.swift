//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: badge/v1/badge_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Badge_V1_BadgeClient`, then call methods of this protocol to make API calls.
public protocol Code_Badge_V1_BadgeClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? { get }

  func resetBadgeCount(
    _ request: Code_Badge_V1_ResetBadgeCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Badge_V1_ResetBadgeCountRequest, Code_Badge_V1_ResetBadgeCountResponse>
}

extension Code_Badge_V1_BadgeClientProtocol {
  public var serviceName: String {
    return "code.badge.v1.Badge"
  }

  /// ResetBadgeCount resets an owner account's badge count back to zero
  ///
  /// - Parameters:
  ///   - request: Request to send to ResetBadgeCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resetBadgeCount(
    _ request: Code_Badge_V1_ResetBadgeCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Badge_V1_ResetBadgeCountRequest, Code_Badge_V1_ResetBadgeCountResponse> {
    return self.makeUnaryCall(
      path: Code_Badge_V1_BadgeClientMetadata.Methods.resetBadgeCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetBadgeCountInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Code_Badge_V1_BadgeClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Code_Badge_V1_BadgeNIOClient")
public final class Code_Badge_V1_BadgeClient: Code_Badge_V1_BadgeClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.badge.v1.Badge service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Badge_V1_BadgeNIOClient: Code_Badge_V1_BadgeClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol?

  /// Creates a client for the code.badge.v1.Badge service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Badge_V1_BadgeAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? { get }

  func makeResetBadgeCountCall(
    _ request: Code_Badge_V1_ResetBadgeCountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Badge_V1_ResetBadgeCountRequest, Code_Badge_V1_ResetBadgeCountResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Badge_V1_BadgeAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Badge_V1_BadgeClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeResetBadgeCountCall(
    _ request: Code_Badge_V1_ResetBadgeCountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Badge_V1_ResetBadgeCountRequest, Code_Badge_V1_ResetBadgeCountResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Badge_V1_BadgeClientMetadata.Methods.resetBadgeCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetBadgeCountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Badge_V1_BadgeAsyncClientProtocol {
  public func resetBadgeCount(
    _ request: Code_Badge_V1_ResetBadgeCountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Badge_V1_ResetBadgeCountResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Badge_V1_BadgeClientMetadata.Methods.resetBadgeCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResetBadgeCountInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Badge_V1_BadgeAsyncClient: Code_Badge_V1_BadgeAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Badge_V1_BadgeClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Code_Badge_V1_BadgeClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'resetBadgeCount'.
  func makeResetBadgeCountInterceptors() -> [ClientInterceptor<Code_Badge_V1_ResetBadgeCountRequest, Code_Badge_V1_ResetBadgeCountResponse>]
}

public enum Code_Badge_V1_BadgeClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Badge",
    fullName: "code.badge.v1.Badge",
    methods: [
      Code_Badge_V1_BadgeClientMetadata.Methods.resetBadgeCount,
    ]
  )

  public enum Methods {
    public static let resetBadgeCount = GRPCMethodDescriptor(
      name: "ResetBadgeCount",
      path: "/code.badge.v1.Badge/ResetBadgeCount",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Badge_V1_BadgeProvider: CallHandlerProvider {
  var interceptors: Code_Badge_V1_BadgeServerInterceptorFactoryProtocol? { get }

  /// ResetBadgeCount resets an owner account's badge count back to zero
  func resetBadgeCount(request: Code_Badge_V1_ResetBadgeCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Badge_V1_ResetBadgeCountResponse>
}

extension Code_Badge_V1_BadgeProvider {
  public var serviceName: Substring {
    return Code_Badge_V1_BadgeServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ResetBadgeCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Badge_V1_ResetBadgeCountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Badge_V1_ResetBadgeCountResponse>(),
        interceptors: self.interceptors?.makeResetBadgeCountInterceptors() ?? [],
        userFunction: self.resetBadgeCount(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Badge_V1_BadgeAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Badge_V1_BadgeServerInterceptorFactoryProtocol? { get }

  /// ResetBadgeCount resets an owner account's badge count back to zero
  @Sendable func resetBadgeCount(
    request: Code_Badge_V1_ResetBadgeCountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Badge_V1_ResetBadgeCountResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Badge_V1_BadgeAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Badge_V1_BadgeServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Badge_V1_BadgeServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Badge_V1_BadgeServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ResetBadgeCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Badge_V1_ResetBadgeCountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Badge_V1_ResetBadgeCountResponse>(),
        interceptors: self.interceptors?.makeResetBadgeCountInterceptors() ?? [],
        wrapping: self.resetBadgeCount(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Code_Badge_V1_BadgeServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'resetBadgeCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResetBadgeCountInterceptors() -> [ServerInterceptor<Code_Badge_V1_ResetBadgeCountRequest, Code_Badge_V1_ResetBadgeCountResponse>]
}

public enum Code_Badge_V1_BadgeServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Badge",
    fullName: "code.badge.v1.Badge",
    methods: [
      Code_Badge_V1_BadgeServerMetadata.Methods.resetBadgeCount,
    ]
  )

  public enum Methods {
    public static let resetBadgeCount = GRPCMethodDescriptor(
      name: "ResetBadgeCount",
      path: "/code.badge.v1.Badge/ResetBadgeCount",
      type: GRPCCallType.unary
    )
  }
}
