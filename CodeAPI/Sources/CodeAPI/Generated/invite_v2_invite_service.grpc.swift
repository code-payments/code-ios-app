//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: invite/v2/invite_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Invite_V2_InviteClient`, then call methods of this protocol to make API calls.
public protocol Code_Invite_V2_InviteClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? { get }

  func getInviteCount(
    _ request: Code_Invite_V2_GetInviteCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Invite_V2_GetInviteCountRequest, Code_Invite_V2_GetInviteCountResponse>

  func invitePhoneNumber(
    _ request: Code_Invite_V2_InvitePhoneNumberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Invite_V2_InvitePhoneNumberRequest, Code_Invite_V2_InvitePhoneNumberResponse>

  func getInvitationStatus(
    _ request: Code_Invite_V2_GetInvitationStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Invite_V2_GetInvitationStatusRequest, Code_Invite_V2_GetInvitationStatusResponse>
}

extension Code_Invite_V2_InviteClientProtocol {
  public var serviceName: String {
    return "code.invite.v2.Invite"
  }

  /// GetInviteCount gets the number of invites that a user can send out.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInviteCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInviteCount(
    _ request: Code_Invite_V2_GetInviteCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Invite_V2_GetInviteCountRequest, Code_Invite_V2_GetInviteCountResponse> {
    return self.makeUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.getInviteCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInviteCountInterceptors() ?? []
    )
  }

  /// InvitePhoneNumber invites someone to join via their phone number. A phone number
  /// can only be invited once by a unique user or invite code. This is to avoid having
  /// a phone number consuming more than one invite count globally.
  ///
  /// - Parameters:
  ///   - request: Request to send to InvitePhoneNumber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func invitePhoneNumber(
    _ request: Code_Invite_V2_InvitePhoneNumberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Invite_V2_InvitePhoneNumberRequest, Code_Invite_V2_InvitePhoneNumberResponse> {
    return self.makeUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.invitePhoneNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvitePhoneNumberInterceptors() ?? []
    )
  }

  /// GetInvitationStatus gets a phone number's invitation status.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInvitationStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInvitationStatus(
    _ request: Code_Invite_V2_GetInvitationStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Invite_V2_GetInvitationStatusRequest, Code_Invite_V2_GetInvitationStatusResponse> {
    return self.makeUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.getInvitationStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInvitationStatusInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Code_Invite_V2_InviteClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Code_Invite_V2_InviteNIOClient")
public final class Code_Invite_V2_InviteClient: Code_Invite_V2_InviteClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.invite.v2.Invite service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Invite_V2_InviteNIOClient: Code_Invite_V2_InviteClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol?

  /// Creates a client for the code.invite.v2.Invite service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Invite_V2_InviteAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? { get }

  func makeGetInviteCountCall(
    _ request: Code_Invite_V2_GetInviteCountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Invite_V2_GetInviteCountRequest, Code_Invite_V2_GetInviteCountResponse>

  func makeInvitePhoneNumberCall(
    _ request: Code_Invite_V2_InvitePhoneNumberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Invite_V2_InvitePhoneNumberRequest, Code_Invite_V2_InvitePhoneNumberResponse>

  func makeGetInvitationStatusCall(
    _ request: Code_Invite_V2_GetInvitationStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Invite_V2_GetInvitationStatusRequest, Code_Invite_V2_GetInvitationStatusResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Invite_V2_InviteAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Invite_V2_InviteClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetInviteCountCall(
    _ request: Code_Invite_V2_GetInviteCountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Invite_V2_GetInviteCountRequest, Code_Invite_V2_GetInviteCountResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.getInviteCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInviteCountInterceptors() ?? []
    )
  }

  public func makeInvitePhoneNumberCall(
    _ request: Code_Invite_V2_InvitePhoneNumberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Invite_V2_InvitePhoneNumberRequest, Code_Invite_V2_InvitePhoneNumberResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.invitePhoneNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvitePhoneNumberInterceptors() ?? []
    )
  }

  public func makeGetInvitationStatusCall(
    _ request: Code_Invite_V2_GetInvitationStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Invite_V2_GetInvitationStatusRequest, Code_Invite_V2_GetInvitationStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.getInvitationStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInvitationStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Invite_V2_InviteAsyncClientProtocol {
  public func getInviteCount(
    _ request: Code_Invite_V2_GetInviteCountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Invite_V2_GetInviteCountResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.getInviteCount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInviteCountInterceptors() ?? []
    )
  }

  public func invitePhoneNumber(
    _ request: Code_Invite_V2_InvitePhoneNumberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Invite_V2_InvitePhoneNumberResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.invitePhoneNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvitePhoneNumberInterceptors() ?? []
    )
  }

  public func getInvitationStatus(
    _ request: Code_Invite_V2_GetInvitationStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Invite_V2_GetInvitationStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Invite_V2_InviteClientMetadata.Methods.getInvitationStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInvitationStatusInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Invite_V2_InviteAsyncClient: Code_Invite_V2_InviteAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Invite_V2_InviteClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Code_Invite_V2_InviteClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getInviteCount'.
  func makeGetInviteCountInterceptors() -> [ClientInterceptor<Code_Invite_V2_GetInviteCountRequest, Code_Invite_V2_GetInviteCountResponse>]

  /// - Returns: Interceptors to use when invoking 'invitePhoneNumber'.
  func makeInvitePhoneNumberInterceptors() -> [ClientInterceptor<Code_Invite_V2_InvitePhoneNumberRequest, Code_Invite_V2_InvitePhoneNumberResponse>]

  /// - Returns: Interceptors to use when invoking 'getInvitationStatus'.
  func makeGetInvitationStatusInterceptors() -> [ClientInterceptor<Code_Invite_V2_GetInvitationStatusRequest, Code_Invite_V2_GetInvitationStatusResponse>]
}

public enum Code_Invite_V2_InviteClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Invite",
    fullName: "code.invite.v2.Invite",
    methods: [
      Code_Invite_V2_InviteClientMetadata.Methods.getInviteCount,
      Code_Invite_V2_InviteClientMetadata.Methods.invitePhoneNumber,
      Code_Invite_V2_InviteClientMetadata.Methods.getInvitationStatus,
    ]
  )

  public enum Methods {
    public static let getInviteCount = GRPCMethodDescriptor(
      name: "GetInviteCount",
      path: "/code.invite.v2.Invite/GetInviteCount",
      type: GRPCCallType.unary
    )

    public static let invitePhoneNumber = GRPCMethodDescriptor(
      name: "InvitePhoneNumber",
      path: "/code.invite.v2.Invite/InvitePhoneNumber",
      type: GRPCCallType.unary
    )

    public static let getInvitationStatus = GRPCMethodDescriptor(
      name: "GetInvitationStatus",
      path: "/code.invite.v2.Invite/GetInvitationStatus",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Invite_V2_InviteProvider: CallHandlerProvider {
  var interceptors: Code_Invite_V2_InviteServerInterceptorFactoryProtocol? { get }

  /// GetInviteCount gets the number of invites that a user can send out.
  func getInviteCount(request: Code_Invite_V2_GetInviteCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Invite_V2_GetInviteCountResponse>

  /// InvitePhoneNumber invites someone to join via their phone number. A phone number
  /// can only be invited once by a unique user or invite code. This is to avoid having
  /// a phone number consuming more than one invite count globally.
  func invitePhoneNumber(request: Code_Invite_V2_InvitePhoneNumberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Invite_V2_InvitePhoneNumberResponse>

  /// GetInvitationStatus gets a phone number's invitation status.
  func getInvitationStatus(request: Code_Invite_V2_GetInvitationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Invite_V2_GetInvitationStatusResponse>
}

extension Code_Invite_V2_InviteProvider {
  public var serviceName: Substring {
    return Code_Invite_V2_InviteServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetInviteCount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Invite_V2_GetInviteCountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Invite_V2_GetInviteCountResponse>(),
        interceptors: self.interceptors?.makeGetInviteCountInterceptors() ?? [],
        userFunction: self.getInviteCount(request:context:)
      )

    case "InvitePhoneNumber":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Invite_V2_InvitePhoneNumberRequest>(),
        responseSerializer: ProtobufSerializer<Code_Invite_V2_InvitePhoneNumberResponse>(),
        interceptors: self.interceptors?.makeInvitePhoneNumberInterceptors() ?? [],
        userFunction: self.invitePhoneNumber(request:context:)
      )

    case "GetInvitationStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Invite_V2_GetInvitationStatusRequest>(),
        responseSerializer: ProtobufSerializer<Code_Invite_V2_GetInvitationStatusResponse>(),
        interceptors: self.interceptors?.makeGetInvitationStatusInterceptors() ?? [],
        userFunction: self.getInvitationStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Invite_V2_InviteAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Invite_V2_InviteServerInterceptorFactoryProtocol? { get }

  /// GetInviteCount gets the number of invites that a user can send out.
  func getInviteCount(
    request: Code_Invite_V2_GetInviteCountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Invite_V2_GetInviteCountResponse

  /// InvitePhoneNumber invites someone to join via their phone number. A phone number
  /// can only be invited once by a unique user or invite code. This is to avoid having
  /// a phone number consuming more than one invite count globally.
  func invitePhoneNumber(
    request: Code_Invite_V2_InvitePhoneNumberRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Invite_V2_InvitePhoneNumberResponse

  /// GetInvitationStatus gets a phone number's invitation status.
  func getInvitationStatus(
    request: Code_Invite_V2_GetInvitationStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Invite_V2_GetInvitationStatusResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Invite_V2_InviteAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Invite_V2_InviteServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Invite_V2_InviteServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Invite_V2_InviteServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetInviteCount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Invite_V2_GetInviteCountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Invite_V2_GetInviteCountResponse>(),
        interceptors: self.interceptors?.makeGetInviteCountInterceptors() ?? [],
        wrapping: { try await self.getInviteCount(request: $0, context: $1) }
      )

    case "InvitePhoneNumber":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Invite_V2_InvitePhoneNumberRequest>(),
        responseSerializer: ProtobufSerializer<Code_Invite_V2_InvitePhoneNumberResponse>(),
        interceptors: self.interceptors?.makeInvitePhoneNumberInterceptors() ?? [],
        wrapping: { try await self.invitePhoneNumber(request: $0, context: $1) }
      )

    case "GetInvitationStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Invite_V2_GetInvitationStatusRequest>(),
        responseSerializer: ProtobufSerializer<Code_Invite_V2_GetInvitationStatusResponse>(),
        interceptors: self.interceptors?.makeGetInvitationStatusInterceptors() ?? [],
        wrapping: { try await self.getInvitationStatus(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Code_Invite_V2_InviteServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getInviteCount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInviteCountInterceptors() -> [ServerInterceptor<Code_Invite_V2_GetInviteCountRequest, Code_Invite_V2_GetInviteCountResponse>]

  /// - Returns: Interceptors to use when handling 'invitePhoneNumber'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInvitePhoneNumberInterceptors() -> [ServerInterceptor<Code_Invite_V2_InvitePhoneNumberRequest, Code_Invite_V2_InvitePhoneNumberResponse>]

  /// - Returns: Interceptors to use when handling 'getInvitationStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInvitationStatusInterceptors() -> [ServerInterceptor<Code_Invite_V2_GetInvitationStatusRequest, Code_Invite_V2_GetInvitationStatusResponse>]
}

public enum Code_Invite_V2_InviteServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Invite",
    fullName: "code.invite.v2.Invite",
    methods: [
      Code_Invite_V2_InviteServerMetadata.Methods.getInviteCount,
      Code_Invite_V2_InviteServerMetadata.Methods.invitePhoneNumber,
      Code_Invite_V2_InviteServerMetadata.Methods.getInvitationStatus,
    ]
  )

  public enum Methods {
    public static let getInviteCount = GRPCMethodDescriptor(
      name: "GetInviteCount",
      path: "/code.invite.v2.Invite/GetInviteCount",
      type: GRPCCallType.unary
    )

    public static let invitePhoneNumber = GRPCMethodDescriptor(
      name: "InvitePhoneNumber",
      path: "/code.invite.v2.Invite/InvitePhoneNumber",
      type: GRPCCallType.unary
    )

    public static let getInvitationStatus = GRPCMethodDescriptor(
      name: "GetInvitationStatus",
      path: "/code.invite.v2.Invite/GetInvitationStatus",
      type: GRPCCallType.unary
    )
  }
}
