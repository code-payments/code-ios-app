//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: transaction/v2/transaction_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Transaction_V2_TransactionClient`, then call methods of this protocol to make API calls.
public protocol Code_Transaction_V2_TransactionClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? { get }

  func submitIntent(
    callOptions: CallOptions?,
    handler: @escaping (Code_Transaction_V2_SubmitIntentResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Transaction_V2_SubmitIntentRequest, Code_Transaction_V2_SubmitIntentResponse>

  func getIntentMetadata(
    _ request: Code_Transaction_V2_GetIntentMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_GetIntentMetadataRequest, Code_Transaction_V2_GetIntentMetadataResponse>

  func getPrivacyUpgradeStatus(
    _ request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>

  func getPrioritizedIntentsForPrivacyUpgrade(
    _ request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>

  func getLimits(
    _ request: Code_Transaction_V2_GetLimitsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_GetLimitsRequest, Code_Transaction_V2_GetLimitsResponse>

  func getPaymentHistory(
    _ request: Code_Transaction_V2_GetPaymentHistoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_GetPaymentHistoryRequest, Code_Transaction_V2_GetPaymentHistoryResponse>

  func canWithdrawToAccount(
    _ request: Code_Transaction_V2_CanWithdrawToAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_CanWithdrawToAccountRequest, Code_Transaction_V2_CanWithdrawToAccountResponse>

  func airdrop(
    _ request: Code_Transaction_V2_AirdropRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Transaction_V2_AirdropRequest, Code_Transaction_V2_AirdropResponse>
}

extension Code_Transaction_V2_TransactionClientProtocol {
  public var serviceName: String {
    return "code.transaction.v2.Transaction"
  }

  /// SubmitIntent is the mechanism for client and server to agree upon a set of
  /// transactions to execute on the blockchain.
  ///
  /// Transactions are never exchanged between client and server. Instead, the
  /// required accounts and arguments for instructions known to each actor are
  /// exchanged to allow independent and local transaction construction.
  ///
  /// Client and server are expected to fully validate the intent. Proofs will
  /// be provided for any parameter requiring one. Signatures should only be
  /// generated after approval of all transactions.
  ///
  /// This RPC is not a traditional streaming endpoint. It bundles two unary calls
  /// to enable DB-level transaction semantics.
  ///
  /// The high-level happy path flow for the RPC is as follows:
  ///   1.  Client initiates a stream and sends SubmitIntentRequest.SubmitActions
  ///   2.  Server validates the intent, its actions and metadata
  ///   3a. If there are transactions requiring the user's signature, then server
  ///       returns SubmitIntentResponse.ServerParameters
  ///   3b. Otherwise, server returns SubmitIntentResponse.Success and closes the
  ///       stream
  ///   4.  For each transaction requiring the user's signature, the client locally
  ///       constructs it, performs validation and collects the signature
  ///   5.  Client sends SubmitIntentRequest.SubmitSignatures with the signature
  ///       list generated from 4
  ///   6.  Server validates all signatures are submitted and are the expected values
  ///       using locally constructed transactions.
  ///   7.  Server returns SubmitIntentResponse.Success and closes the stream
  /// In the error case:
  ///   * Server will return SubmitIntentResponse.Error and close the stream
  ///   * Client will close the stream
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func submitIntent(
    callOptions: CallOptions? = nil,
    handler: @escaping (Code_Transaction_V2_SubmitIntentResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Transaction_V2_SubmitIntentRequest, Code_Transaction_V2_SubmitIntentResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.submitIntent.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIntentInterceptors() ?? [],
      handler: handler
    )
  }

  /// GetIntentMetadata gets basic metadata on an intent. It can also be used
  /// to fetch the status of submitted intents. Metadata exists only for intents
  /// that have been successfully submitted.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIntentMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIntentMetadata(
    _ request: Code_Transaction_V2_GetIntentMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_GetIntentMetadataRequest, Code_Transaction_V2_GetIntentMetadataResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getIntentMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIntentMetadataInterceptors() ?? []
    )
  }

  /// GetPrivacyUpgradeStatus gets the status of a private transaction and the
  /// ability to upgrade it to permanent privacy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrivacyUpgradeStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPrivacyUpgradeStatus(
    _ request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, Code_Transaction_V2_GetPrivacyUpgradeStatusResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPrivacyUpgradeStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrivacyUpgradeStatusInterceptors() ?? []
    )
  }

  /// GetPrioritizedIntentsForPrivacyUpgrade allows clients to get private
  /// intent actions that can be upgraded in a secure and verifiable manner.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrioritizedIntentsForPrivacyUpgrade.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPrioritizedIntentsForPrivacyUpgrade(
    _ request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPrioritizedIntentsForPrivacyUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() ?? []
    )
  }

  /// GetLimits gets limits for money moving intents for an owner account in an
  /// identity-aware manner
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLimits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLimits(
    _ request: Code_Transaction_V2_GetLimitsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_GetLimitsRequest, Code_Transaction_V2_GetLimitsResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getLimits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLimitsInterceptors() ?? []
    )
  }

  /// GetPaymentHistory gets an owner account's payment history inferred from intents
  ///
  /// Deprecated: Payment history has migrated to chats
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPaymentHistory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPaymentHistory(
    _ request: Code_Transaction_V2_GetPaymentHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_GetPaymentHistoryRequest, Code_Transaction_V2_GetPaymentHistoryResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPaymentHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaymentHistoryInterceptors() ?? []
    )
  }

  /// CanWithdrawToAccount provides hints to clients for submitting withdraw intents.
  /// The RPC indicates if a withdrawal is possible, and how it should be performed.
  ///
  /// - Parameters:
  ///   - request: Request to send to CanWithdrawToAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func canWithdrawToAccount(
    _ request: Code_Transaction_V2_CanWithdrawToAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_CanWithdrawToAccountRequest, Code_Transaction_V2_CanWithdrawToAccountResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.canWithdrawToAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanWithdrawToAccountInterceptors() ?? []
    )
  }

  /// Airdrop airdrops Kin to the requesting account
  ///
  /// - Parameters:
  ///   - request: Request to send to Airdrop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func airdrop(
    _ request: Code_Transaction_V2_AirdropRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Transaction_V2_AirdropRequest, Code_Transaction_V2_AirdropResponse> {
    return self.makeUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.airdrop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAirdropInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Code_Transaction_V2_TransactionClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Code_Transaction_V2_TransactionNIOClient")
public final class Code_Transaction_V2_TransactionClient: Code_Transaction_V2_TransactionClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.transaction.v2.Transaction service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Transaction_V2_TransactionNIOClient: Code_Transaction_V2_TransactionClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol?

  /// Creates a client for the code.transaction.v2.Transaction service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Transaction_V2_TransactionAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? { get }

  func makeSubmitIntentCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Transaction_V2_SubmitIntentRequest, Code_Transaction_V2_SubmitIntentResponse>

  func makeGetIntentMetadataCall(
    _ request: Code_Transaction_V2_GetIntentMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetIntentMetadataRequest, Code_Transaction_V2_GetIntentMetadataResponse>

  func makeGetPrivacyUpgradeStatusCall(
    _ request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>

  func makeGetPrioritizedIntentsForPrivacyUpgradeCall(
    _ request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>

  func makeGetLimitsCall(
    _ request: Code_Transaction_V2_GetLimitsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetLimitsRequest, Code_Transaction_V2_GetLimitsResponse>

  func makeGetPaymentHistoryCall(
    _ request: Code_Transaction_V2_GetPaymentHistoryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetPaymentHistoryRequest, Code_Transaction_V2_GetPaymentHistoryResponse>

  func makeCanWithdrawToAccountCall(
    _ request: Code_Transaction_V2_CanWithdrawToAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_CanWithdrawToAccountRequest, Code_Transaction_V2_CanWithdrawToAccountResponse>

  func makeAirdropCall(
    _ request: Code_Transaction_V2_AirdropRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_AirdropRequest, Code_Transaction_V2_AirdropResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Transaction_V2_TransactionAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Transaction_V2_TransactionClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSubmitIntentCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Transaction_V2_SubmitIntentRequest, Code_Transaction_V2_SubmitIntentResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.submitIntent.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIntentInterceptors() ?? []
    )
  }

  public func makeGetIntentMetadataCall(
    _ request: Code_Transaction_V2_GetIntentMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetIntentMetadataRequest, Code_Transaction_V2_GetIntentMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getIntentMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIntentMetadataInterceptors() ?? []
    )
  }

  public func makeGetPrivacyUpgradeStatusCall(
    _ request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, Code_Transaction_V2_GetPrivacyUpgradeStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPrivacyUpgradeStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrivacyUpgradeStatusInterceptors() ?? []
    )
  }

  public func makeGetPrioritizedIntentsForPrivacyUpgradeCall(
    _ request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPrioritizedIntentsForPrivacyUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() ?? []
    )
  }

  public func makeGetLimitsCall(
    _ request: Code_Transaction_V2_GetLimitsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetLimitsRequest, Code_Transaction_V2_GetLimitsResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getLimits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLimitsInterceptors() ?? []
    )
  }

  public func makeGetPaymentHistoryCall(
    _ request: Code_Transaction_V2_GetPaymentHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_GetPaymentHistoryRequest, Code_Transaction_V2_GetPaymentHistoryResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPaymentHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaymentHistoryInterceptors() ?? []
    )
  }

  public func makeCanWithdrawToAccountCall(
    _ request: Code_Transaction_V2_CanWithdrawToAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_CanWithdrawToAccountRequest, Code_Transaction_V2_CanWithdrawToAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.canWithdrawToAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanWithdrawToAccountInterceptors() ?? []
    )
  }

  public func makeAirdropCall(
    _ request: Code_Transaction_V2_AirdropRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Transaction_V2_AirdropRequest, Code_Transaction_V2_AirdropResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.airdrop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAirdropInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Transaction_V2_TransactionAsyncClientProtocol {
  public func submitIntent<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Transaction_V2_SubmitIntentResponse> where RequestStream: Sequence, RequestStream.Element == Code_Transaction_V2_SubmitIntentRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.submitIntent.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIntentInterceptors() ?? []
    )
  }

  public func submitIntent<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Transaction_V2_SubmitIntentResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Code_Transaction_V2_SubmitIntentRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.submitIntent.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitIntentInterceptors() ?? []
    )
  }

  public func getIntentMetadata(
    _ request: Code_Transaction_V2_GetIntentMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_GetIntentMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getIntentMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIntentMetadataInterceptors() ?? []
    )
  }

  public func getPrivacyUpgradeStatus(
    _ request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_GetPrivacyUpgradeStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPrivacyUpgradeStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrivacyUpgradeStatusInterceptors() ?? []
    )
  }

  public func getPrioritizedIntentsForPrivacyUpgrade(
    _ request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPrioritizedIntentsForPrivacyUpgrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() ?? []
    )
  }

  public func getLimits(
    _ request: Code_Transaction_V2_GetLimitsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_GetLimitsResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getLimits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLimitsInterceptors() ?? []
    )
  }

  public func getPaymentHistory(
    _ request: Code_Transaction_V2_GetPaymentHistoryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_GetPaymentHistoryResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.getPaymentHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPaymentHistoryInterceptors() ?? []
    )
  }

  public func canWithdrawToAccount(
    _ request: Code_Transaction_V2_CanWithdrawToAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_CanWithdrawToAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.canWithdrawToAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanWithdrawToAccountInterceptors() ?? []
    )
  }

  public func airdrop(
    _ request: Code_Transaction_V2_AirdropRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Transaction_V2_AirdropResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Transaction_V2_TransactionClientMetadata.Methods.airdrop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAirdropInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Transaction_V2_TransactionAsyncClient: Code_Transaction_V2_TransactionAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Code_Transaction_V2_TransactionClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'submitIntent'.
  func makeSubmitIntentInterceptors() -> [ClientInterceptor<Code_Transaction_V2_SubmitIntentRequest, Code_Transaction_V2_SubmitIntentResponse>]

  /// - Returns: Interceptors to use when invoking 'getIntentMetadata'.
  func makeGetIntentMetadataInterceptors() -> [ClientInterceptor<Code_Transaction_V2_GetIntentMetadataRequest, Code_Transaction_V2_GetIntentMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'getPrivacyUpgradeStatus'.
  func makeGetPrivacyUpgradeStatusInterceptors() -> [ClientInterceptor<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getPrioritizedIntentsForPrivacyUpgrade'.
  func makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() -> [ClientInterceptor<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>]

  /// - Returns: Interceptors to use when invoking 'getLimits'.
  func makeGetLimitsInterceptors() -> [ClientInterceptor<Code_Transaction_V2_GetLimitsRequest, Code_Transaction_V2_GetLimitsResponse>]

  /// - Returns: Interceptors to use when invoking 'getPaymentHistory'.
  func makeGetPaymentHistoryInterceptors() -> [ClientInterceptor<Code_Transaction_V2_GetPaymentHistoryRequest, Code_Transaction_V2_GetPaymentHistoryResponse>]

  /// - Returns: Interceptors to use when invoking 'canWithdrawToAccount'.
  func makeCanWithdrawToAccountInterceptors() -> [ClientInterceptor<Code_Transaction_V2_CanWithdrawToAccountRequest, Code_Transaction_V2_CanWithdrawToAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'airdrop'.
  func makeAirdropInterceptors() -> [ClientInterceptor<Code_Transaction_V2_AirdropRequest, Code_Transaction_V2_AirdropResponse>]
}

public enum Code_Transaction_V2_TransactionClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Transaction",
    fullName: "code.transaction.v2.Transaction",
    methods: [
      Code_Transaction_V2_TransactionClientMetadata.Methods.submitIntent,
      Code_Transaction_V2_TransactionClientMetadata.Methods.getIntentMetadata,
      Code_Transaction_V2_TransactionClientMetadata.Methods.getPrivacyUpgradeStatus,
      Code_Transaction_V2_TransactionClientMetadata.Methods.getPrioritizedIntentsForPrivacyUpgrade,
      Code_Transaction_V2_TransactionClientMetadata.Methods.getLimits,
      Code_Transaction_V2_TransactionClientMetadata.Methods.getPaymentHistory,
      Code_Transaction_V2_TransactionClientMetadata.Methods.canWithdrawToAccount,
      Code_Transaction_V2_TransactionClientMetadata.Methods.airdrop,
    ]
  )

  public enum Methods {
    public static let submitIntent = GRPCMethodDescriptor(
      name: "SubmitIntent",
      path: "/code.transaction.v2.Transaction/SubmitIntent",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let getIntentMetadata = GRPCMethodDescriptor(
      name: "GetIntentMetadata",
      path: "/code.transaction.v2.Transaction/GetIntentMetadata",
      type: GRPCCallType.unary
    )

    public static let getPrivacyUpgradeStatus = GRPCMethodDescriptor(
      name: "GetPrivacyUpgradeStatus",
      path: "/code.transaction.v2.Transaction/GetPrivacyUpgradeStatus",
      type: GRPCCallType.unary
    )

    public static let getPrioritizedIntentsForPrivacyUpgrade = GRPCMethodDescriptor(
      name: "GetPrioritizedIntentsForPrivacyUpgrade",
      path: "/code.transaction.v2.Transaction/GetPrioritizedIntentsForPrivacyUpgrade",
      type: GRPCCallType.unary
    )

    public static let getLimits = GRPCMethodDescriptor(
      name: "GetLimits",
      path: "/code.transaction.v2.Transaction/GetLimits",
      type: GRPCCallType.unary
    )

    public static let getPaymentHistory = GRPCMethodDescriptor(
      name: "GetPaymentHistory",
      path: "/code.transaction.v2.Transaction/GetPaymentHistory",
      type: GRPCCallType.unary
    )

    public static let canWithdrawToAccount = GRPCMethodDescriptor(
      name: "CanWithdrawToAccount",
      path: "/code.transaction.v2.Transaction/CanWithdrawToAccount",
      type: GRPCCallType.unary
    )

    public static let airdrop = GRPCMethodDescriptor(
      name: "Airdrop",
      path: "/code.transaction.v2.Transaction/Airdrop",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Transaction_V2_TransactionProvider: CallHandlerProvider {
  var interceptors: Code_Transaction_V2_TransactionServerInterceptorFactoryProtocol? { get }

  /// SubmitIntent is the mechanism for client and server to agree upon a set of
  /// transactions to execute on the blockchain.
  ///
  /// Transactions are never exchanged between client and server. Instead, the
  /// required accounts and arguments for instructions known to each actor are
  /// exchanged to allow independent and local transaction construction.
  ///
  /// Client and server are expected to fully validate the intent. Proofs will
  /// be provided for any parameter requiring one. Signatures should only be
  /// generated after approval of all transactions.
  ///
  /// This RPC is not a traditional streaming endpoint. It bundles two unary calls
  /// to enable DB-level transaction semantics.
  ///
  /// The high-level happy path flow for the RPC is as follows:
  ///   1.  Client initiates a stream and sends SubmitIntentRequest.SubmitActions
  ///   2.  Server validates the intent, its actions and metadata
  ///   3a. If there are transactions requiring the user's signature, then server
  ///       returns SubmitIntentResponse.ServerParameters
  ///   3b. Otherwise, server returns SubmitIntentResponse.Success and closes the
  ///       stream
  ///   4.  For each transaction requiring the user's signature, the client locally
  ///       constructs it, performs validation and collects the signature
  ///   5.  Client sends SubmitIntentRequest.SubmitSignatures with the signature
  ///       list generated from 4
  ///   6.  Server validates all signatures are submitted and are the expected values
  ///       using locally constructed transactions.
  ///   7.  Server returns SubmitIntentResponse.Success and closes the stream
  /// In the error case:
  ///   * Server will return SubmitIntentResponse.Error and close the stream
  ///   * Client will close the stream
  func submitIntent(context: StreamingResponseCallContext<Code_Transaction_V2_SubmitIntentResponse>) -> EventLoopFuture<(StreamEvent<Code_Transaction_V2_SubmitIntentRequest>) -> Void>

  /// GetIntentMetadata gets basic metadata on an intent. It can also be used
  /// to fetch the status of submitted intents. Metadata exists only for intents
  /// that have been successfully submitted.
  func getIntentMetadata(request: Code_Transaction_V2_GetIntentMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_GetIntentMetadataResponse>

  /// GetPrivacyUpgradeStatus gets the status of a private transaction and the
  /// ability to upgrade it to permanent privacy.
  func getPrivacyUpgradeStatus(request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>

  /// GetPrioritizedIntentsForPrivacyUpgrade allows clients to get private
  /// intent actions that can be upgraded in a secure and verifiable manner.
  func getPrioritizedIntentsForPrivacyUpgrade(request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>

  /// GetLimits gets limits for money moving intents for an owner account in an
  /// identity-aware manner
  func getLimits(request: Code_Transaction_V2_GetLimitsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_GetLimitsResponse>

  /// GetPaymentHistory gets an owner account's payment history inferred from intents
  ///
  /// Deprecated: Payment history has migrated to chats
  func getPaymentHistory(request: Code_Transaction_V2_GetPaymentHistoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_GetPaymentHistoryResponse>

  /// CanWithdrawToAccount provides hints to clients for submitting withdraw intents.
  /// The RPC indicates if a withdrawal is possible, and how it should be performed.
  func canWithdrawToAccount(request: Code_Transaction_V2_CanWithdrawToAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_CanWithdrawToAccountResponse>

  /// Airdrop airdrops Kin to the requesting account
  func airdrop(request: Code_Transaction_V2_AirdropRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Transaction_V2_AirdropResponse>
}

extension Code_Transaction_V2_TransactionProvider {
  public var serviceName: Substring {
    return Code_Transaction_V2_TransactionServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubmitIntent":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_SubmitIntentRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_SubmitIntentResponse>(),
        interceptors: self.interceptors?.makeSubmitIntentInterceptors() ?? [],
        observerFactory: self.submitIntent(context:)
      )

    case "GetIntentMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetIntentMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetIntentMetadataResponse>(),
        interceptors: self.interceptors?.makeGetIntentMetadataInterceptors() ?? [],
        userFunction: self.getIntentMetadata(request:context:)
      )

    case "GetPrivacyUpgradeStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>(),
        interceptors: self.interceptors?.makeGetPrivacyUpgradeStatusInterceptors() ?? [],
        userFunction: self.getPrivacyUpgradeStatus(request:context:)
      )

    case "GetPrioritizedIntentsForPrivacyUpgrade":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>(),
        interceptors: self.interceptors?.makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() ?? [],
        userFunction: self.getPrioritizedIntentsForPrivacyUpgrade(request:context:)
      )

    case "GetLimits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetLimitsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetLimitsResponse>(),
        interceptors: self.interceptors?.makeGetLimitsInterceptors() ?? [],
        userFunction: self.getLimits(request:context:)
      )

    case "GetPaymentHistory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetPaymentHistoryRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetPaymentHistoryResponse>(),
        interceptors: self.interceptors?.makeGetPaymentHistoryInterceptors() ?? [],
        userFunction: self.getPaymentHistory(request:context:)
      )

    case "CanWithdrawToAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_CanWithdrawToAccountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_CanWithdrawToAccountResponse>(),
        interceptors: self.interceptors?.makeCanWithdrawToAccountInterceptors() ?? [],
        userFunction: self.canWithdrawToAccount(request:context:)
      )

    case "Airdrop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_AirdropRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_AirdropResponse>(),
        interceptors: self.interceptors?.makeAirdropInterceptors() ?? [],
        userFunction: self.airdrop(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Transaction_V2_TransactionAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Transaction_V2_TransactionServerInterceptorFactoryProtocol? { get }

  /// SubmitIntent is the mechanism for client and server to agree upon a set of
  /// transactions to execute on the blockchain.
  ///
  /// Transactions are never exchanged between client and server. Instead, the
  /// required accounts and arguments for instructions known to each actor are
  /// exchanged to allow independent and local transaction construction.
  ///
  /// Client and server are expected to fully validate the intent. Proofs will
  /// be provided for any parameter requiring one. Signatures should only be
  /// generated after approval of all transactions.
  ///
  /// This RPC is not a traditional streaming endpoint. It bundles two unary calls
  /// to enable DB-level transaction semantics.
  ///
  /// The high-level happy path flow for the RPC is as follows:
  ///   1.  Client initiates a stream and sends SubmitIntentRequest.SubmitActions
  ///   2.  Server validates the intent, its actions and metadata
  ///   3a. If there are transactions requiring the user's signature, then server
  ///       returns SubmitIntentResponse.ServerParameters
  ///   3b. Otherwise, server returns SubmitIntentResponse.Success and closes the
  ///       stream
  ///   4.  For each transaction requiring the user's signature, the client locally
  ///       constructs it, performs validation and collects the signature
  ///   5.  Client sends SubmitIntentRequest.SubmitSignatures with the signature
  ///       list generated from 4
  ///   6.  Server validates all signatures are submitted and are the expected values
  ///       using locally constructed transactions.
  ///   7.  Server returns SubmitIntentResponse.Success and closes the stream
  /// In the error case:
  ///   * Server will return SubmitIntentResponse.Error and close the stream
  ///   * Client will close the stream
  @Sendable func submitIntent(
    requestStream: GRPCAsyncRequestStream<Code_Transaction_V2_SubmitIntentRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Code_Transaction_V2_SubmitIntentResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// GetIntentMetadata gets basic metadata on an intent. It can also be used
  /// to fetch the status of submitted intents. Metadata exists only for intents
  /// that have been successfully submitted.
  @Sendable func getIntentMetadata(
    request: Code_Transaction_V2_GetIntentMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_GetIntentMetadataResponse

  /// GetPrivacyUpgradeStatus gets the status of a private transaction and the
  /// ability to upgrade it to permanent privacy.
  @Sendable func getPrivacyUpgradeStatus(
    request: Code_Transaction_V2_GetPrivacyUpgradeStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_GetPrivacyUpgradeStatusResponse

  /// GetPrioritizedIntentsForPrivacyUpgrade allows clients to get private
  /// intent actions that can be upgraded in a secure and verifiable manner.
  @Sendable func getPrioritizedIntentsForPrivacyUpgrade(
    request: Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse

  /// GetLimits gets limits for money moving intents for an owner account in an
  /// identity-aware manner
  @Sendable func getLimits(
    request: Code_Transaction_V2_GetLimitsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_GetLimitsResponse

  /// GetPaymentHistory gets an owner account's payment history inferred from intents
  ///
  /// Deprecated: Payment history has migrated to chats
  @Sendable func getPaymentHistory(
    request: Code_Transaction_V2_GetPaymentHistoryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_GetPaymentHistoryResponse

  /// CanWithdrawToAccount provides hints to clients for submitting withdraw intents.
  /// The RPC indicates if a withdrawal is possible, and how it should be performed.
  @Sendable func canWithdrawToAccount(
    request: Code_Transaction_V2_CanWithdrawToAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_CanWithdrawToAccountResponse

  /// Airdrop airdrops Kin to the requesting account
  @Sendable func airdrop(
    request: Code_Transaction_V2_AirdropRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Transaction_V2_AirdropResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Transaction_V2_TransactionAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Transaction_V2_TransactionServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Transaction_V2_TransactionServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Transaction_V2_TransactionServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SubmitIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_SubmitIntentRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_SubmitIntentResponse>(),
        interceptors: self.interceptors?.makeSubmitIntentInterceptors() ?? [],
        wrapping: self.submitIntent(requestStream:responseStream:context:)
      )

    case "GetIntentMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetIntentMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetIntentMetadataResponse>(),
        interceptors: self.interceptors?.makeGetIntentMetadataInterceptors() ?? [],
        wrapping: self.getIntentMetadata(request:context:)
      )

    case "GetPrivacyUpgradeStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>(),
        interceptors: self.interceptors?.makeGetPrivacyUpgradeStatusInterceptors() ?? [],
        wrapping: self.getPrivacyUpgradeStatus(request:context:)
      )

    case "GetPrioritizedIntentsForPrivacyUpgrade":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>(),
        interceptors: self.interceptors?.makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() ?? [],
        wrapping: self.getPrioritizedIntentsForPrivacyUpgrade(request:context:)
      )

    case "GetLimits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetLimitsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetLimitsResponse>(),
        interceptors: self.interceptors?.makeGetLimitsInterceptors() ?? [],
        wrapping: self.getLimits(request:context:)
      )

    case "GetPaymentHistory":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_GetPaymentHistoryRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_GetPaymentHistoryResponse>(),
        interceptors: self.interceptors?.makeGetPaymentHistoryInterceptors() ?? [],
        wrapping: self.getPaymentHistory(request:context:)
      )

    case "CanWithdrawToAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_CanWithdrawToAccountRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_CanWithdrawToAccountResponse>(),
        interceptors: self.interceptors?.makeCanWithdrawToAccountInterceptors() ?? [],
        wrapping: self.canWithdrawToAccount(request:context:)
      )

    case "Airdrop":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Transaction_V2_AirdropRequest>(),
        responseSerializer: ProtobufSerializer<Code_Transaction_V2_AirdropResponse>(),
        interceptors: self.interceptors?.makeAirdropInterceptors() ?? [],
        wrapping: self.airdrop(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Code_Transaction_V2_TransactionServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'submitIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitIntentInterceptors() -> [ServerInterceptor<Code_Transaction_V2_SubmitIntentRequest, Code_Transaction_V2_SubmitIntentResponse>]

  /// - Returns: Interceptors to use when handling 'getIntentMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetIntentMetadataInterceptors() -> [ServerInterceptor<Code_Transaction_V2_GetIntentMetadataRequest, Code_Transaction_V2_GetIntentMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'getPrivacyUpgradeStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPrivacyUpgradeStatusInterceptors() -> [ServerInterceptor<Code_Transaction_V2_GetPrivacyUpgradeStatusRequest, Code_Transaction_V2_GetPrivacyUpgradeStatusResponse>]

  /// - Returns: Interceptors to use when handling 'getPrioritizedIntentsForPrivacyUpgrade'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPrioritizedIntentsForPrivacyUpgradeInterceptors() -> [ServerInterceptor<Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeRequest, Code_Transaction_V2_GetPrioritizedIntentsForPrivacyUpgradeResponse>]

  /// - Returns: Interceptors to use when handling 'getLimits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLimitsInterceptors() -> [ServerInterceptor<Code_Transaction_V2_GetLimitsRequest, Code_Transaction_V2_GetLimitsResponse>]

  /// - Returns: Interceptors to use when handling 'getPaymentHistory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPaymentHistoryInterceptors() -> [ServerInterceptor<Code_Transaction_V2_GetPaymentHistoryRequest, Code_Transaction_V2_GetPaymentHistoryResponse>]

  /// - Returns: Interceptors to use when handling 'canWithdrawToAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCanWithdrawToAccountInterceptors() -> [ServerInterceptor<Code_Transaction_V2_CanWithdrawToAccountRequest, Code_Transaction_V2_CanWithdrawToAccountResponse>]

  /// - Returns: Interceptors to use when handling 'airdrop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAirdropInterceptors() -> [ServerInterceptor<Code_Transaction_V2_AirdropRequest, Code_Transaction_V2_AirdropResponse>]
}

public enum Code_Transaction_V2_TransactionServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Transaction",
    fullName: "code.transaction.v2.Transaction",
    methods: [
      Code_Transaction_V2_TransactionServerMetadata.Methods.submitIntent,
      Code_Transaction_V2_TransactionServerMetadata.Methods.getIntentMetadata,
      Code_Transaction_V2_TransactionServerMetadata.Methods.getPrivacyUpgradeStatus,
      Code_Transaction_V2_TransactionServerMetadata.Methods.getPrioritizedIntentsForPrivacyUpgrade,
      Code_Transaction_V2_TransactionServerMetadata.Methods.getLimits,
      Code_Transaction_V2_TransactionServerMetadata.Methods.getPaymentHistory,
      Code_Transaction_V2_TransactionServerMetadata.Methods.canWithdrawToAccount,
      Code_Transaction_V2_TransactionServerMetadata.Methods.airdrop,
    ]
  )

  public enum Methods {
    public static let submitIntent = GRPCMethodDescriptor(
      name: "SubmitIntent",
      path: "/code.transaction.v2.Transaction/SubmitIntent",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let getIntentMetadata = GRPCMethodDescriptor(
      name: "GetIntentMetadata",
      path: "/code.transaction.v2.Transaction/GetIntentMetadata",
      type: GRPCCallType.unary
    )

    public static let getPrivacyUpgradeStatus = GRPCMethodDescriptor(
      name: "GetPrivacyUpgradeStatus",
      path: "/code.transaction.v2.Transaction/GetPrivacyUpgradeStatus",
      type: GRPCCallType.unary
    )

    public static let getPrioritizedIntentsForPrivacyUpgrade = GRPCMethodDescriptor(
      name: "GetPrioritizedIntentsForPrivacyUpgrade",
      path: "/code.transaction.v2.Transaction/GetPrioritizedIntentsForPrivacyUpgrade",
      type: GRPCCallType.unary
    )

    public static let getLimits = GRPCMethodDescriptor(
      name: "GetLimits",
      path: "/code.transaction.v2.Transaction/GetLimits",
      type: GRPCCallType.unary
    )

    public static let getPaymentHistory = GRPCMethodDescriptor(
      name: "GetPaymentHistory",
      path: "/code.transaction.v2.Transaction/GetPaymentHistory",
      type: GRPCCallType.unary
    )

    public static let canWithdrawToAccount = GRPCMethodDescriptor(
      name: "CanWithdrawToAccount",
      path: "/code.transaction.v2.Transaction/CanWithdrawToAccount",
      type: GRPCCallType.unary
    )

    public static let airdrop = GRPCMethodDescriptor(
      name: "Airdrop",
      path: "/code.transaction.v2.Transaction/Airdrop",
      type: GRPCCallType.unary
    )
  }
}
