//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chat/v1/chat_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Chat_V1_ChatClient`, then call methods of this protocol to make API calls.
public protocol Code_Chat_V1_ChatClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? { get }

  func getChats(
    _ request: Code_Chat_V1_GetChatsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V1_GetChatsRequest, Code_Chat_V1_GetChatsResponse>

  func getMessages(
    _ request: Code_Chat_V1_GetMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V1_GetMessagesRequest, Code_Chat_V1_GetMessagesResponse>

  func advancePointer(
    _ request: Code_Chat_V1_AdvancePointerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V1_AdvancePointerRequest, Code_Chat_V1_AdvancePointerResponse>

  func setMuteState(
    _ request: Code_Chat_V1_SetMuteStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V1_SetMuteStateRequest, Code_Chat_V1_SetMuteStateResponse>

  func setSubscriptionState(
    _ request: Code_Chat_V1_SetSubscriptionStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V1_SetSubscriptionStateRequest, Code_Chat_V1_SetSubscriptionStateResponse>

  func streamChatEvents(
    callOptions: CallOptions?,
    handler: @escaping (Code_Chat_V1_StreamChatEventsResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Chat_V1_StreamChatEventsRequest, Code_Chat_V1_StreamChatEventsResponse>

  func sendMessage(
    _ request: Code_Chat_V1_SendMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V1_SendMessageRequest, Code_Chat_V1_SendMessageResponse>
}

extension Code_Chat_V1_ChatClientProtocol {
  public var serviceName: String {
    return "code.chat.v1.Chat"
  }

  /// GetChats gets the set of chats for an owner account
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChats.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChats(
    _ request: Code_Chat_V1_GetChatsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V1_GetChatsRequest, Code_Chat_V1_GetChatsResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  /// GetMessages gets the set of messages for a chat
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMessages(
    _ request: Code_Chat_V1_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V1_GetMessagesRequest, Code_Chat_V1_GetMessagesResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  /// AdvancePointer advances a pointer in chat history
  ///
  /// - Parameters:
  ///   - request: Request to send to AdvancePointer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func advancePointer(
    _ request: Code_Chat_V1_AdvancePointerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V1_AdvancePointerRequest, Code_Chat_V1_AdvancePointerResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.advancePointer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? []
    )
  }

  /// SetMuteState configures the mute state of a chat
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMuteState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMuteState(
    _ request: Code_Chat_V1_SetMuteStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V1_SetMuteStateRequest, Code_Chat_V1_SetMuteStateResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.setMuteState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? []
    )
  }

  /// SetSubscriptionState configures the susbscription state of a chat
  ///
  /// - Parameters:
  ///   - request: Request to send to SetSubscriptionState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setSubscriptionState(
    _ request: Code_Chat_V1_SetSubscriptionStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V1_SetSubscriptionStateRequest, Code_Chat_V1_SetSubscriptionStateResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.setSubscriptionState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetSubscriptionStateInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to StreamChatEvents
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamChatEvents(
    callOptions: CallOptions? = nil,
    handler: @escaping (Code_Chat_V1_StreamChatEventsResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Chat_V1_StreamChatEventsRequest, Code_Chat_V1_StreamChatEventsResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.streamChatEvents.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SendMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendMessage(
    _ request: Code_Chat_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V1_SendMessageRequest, Code_Chat_V1_SendMessageResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Code_Chat_V1_ChatClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Code_Chat_V1_ChatNIOClient")
public final class Code_Chat_V1_ChatClient: Code_Chat_V1_ChatClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.chat.v1.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Chat_V1_ChatNIOClient: Code_Chat_V1_ChatClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol?

  /// Creates a client for the code.chat.v1.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Chat_V1_ChatAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? { get }

  func makeGetChatsCall(
    _ request: Code_Chat_V1_GetChatsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_GetChatsRequest, Code_Chat_V1_GetChatsResponse>

  func makeGetMessagesCall(
    _ request: Code_Chat_V1_GetMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_GetMessagesRequest, Code_Chat_V1_GetMessagesResponse>

  func makeAdvancePointerCall(
    _ request: Code_Chat_V1_AdvancePointerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_AdvancePointerRequest, Code_Chat_V1_AdvancePointerResponse>

  func makeSetMuteStateCall(
    _ request: Code_Chat_V1_SetMuteStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_SetMuteStateRequest, Code_Chat_V1_SetMuteStateResponse>

  func makeSetSubscriptionStateCall(
    _ request: Code_Chat_V1_SetSubscriptionStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_SetSubscriptionStateRequest, Code_Chat_V1_SetSubscriptionStateResponse>

  func makeStreamChatEventsCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Chat_V1_StreamChatEventsRequest, Code_Chat_V1_StreamChatEventsResponse>

  func makeSendMessageCall(
    _ request: Code_Chat_V1_SendMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_SendMessageRequest, Code_Chat_V1_SendMessageResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Chat_V1_ChatAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Chat_V1_ChatClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetChatsCall(
    _ request: Code_Chat_V1_GetChatsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_GetChatsRequest, Code_Chat_V1_GetChatsResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  public func makeGetMessagesCall(
    _ request: Code_Chat_V1_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_GetMessagesRequest, Code_Chat_V1_GetMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  public func makeAdvancePointerCall(
    _ request: Code_Chat_V1_AdvancePointerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_AdvancePointerRequest, Code_Chat_V1_AdvancePointerResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.advancePointer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? []
    )
  }

  public func makeSetMuteStateCall(
    _ request: Code_Chat_V1_SetMuteStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_SetMuteStateRequest, Code_Chat_V1_SetMuteStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.setMuteState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? []
    )
  }

  public func makeSetSubscriptionStateCall(
    _ request: Code_Chat_V1_SetSubscriptionStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_SetSubscriptionStateRequest, Code_Chat_V1_SetSubscriptionStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.setSubscriptionState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetSubscriptionStateInterceptors() ?? []
    )
  }

  public func makeStreamChatEventsCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Chat_V1_StreamChatEventsRequest, Code_Chat_V1_StreamChatEventsResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.streamChatEvents.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? []
    )
  }

  public func makeSendMessageCall(
    _ request: Code_Chat_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V1_SendMessageRequest, Code_Chat_V1_SendMessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Chat_V1_ChatAsyncClientProtocol {
  public func getChats(
    _ request: Code_Chat_V1_GetChatsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V1_GetChatsResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  public func getMessages(
    _ request: Code_Chat_V1_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V1_GetMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  public func advancePointer(
    _ request: Code_Chat_V1_AdvancePointerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V1_AdvancePointerResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.advancePointer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? []
    )
  }

  public func setMuteState(
    _ request: Code_Chat_V1_SetMuteStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V1_SetMuteStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.setMuteState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? []
    )
  }

  public func setSubscriptionState(
    _ request: Code_Chat_V1_SetSubscriptionStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V1_SetSubscriptionStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.setSubscriptionState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetSubscriptionStateInterceptors() ?? []
    )
  }

  public func streamChatEvents<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Chat_V1_StreamChatEventsResponse> where RequestStream: Sequence, RequestStream.Element == Code_Chat_V1_StreamChatEventsRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.streamChatEvents.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? []
    )
  }

  public func streamChatEvents<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Chat_V1_StreamChatEventsResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Code_Chat_V1_StreamChatEventsRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.streamChatEvents.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? []
    )
  }

  public func sendMessage(
    _ request: Code_Chat_V1_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V1_SendMessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V1_ChatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Chat_V1_ChatAsyncClient: Code_Chat_V1_ChatAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Chat_V1_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Code_Chat_V1_ChatClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getChats'.
  func makeGetChatsInterceptors() -> [ClientInterceptor<Code_Chat_V1_GetChatsRequest, Code_Chat_V1_GetChatsResponse>]

  /// - Returns: Interceptors to use when invoking 'getMessages'.
  func makeGetMessagesInterceptors() -> [ClientInterceptor<Code_Chat_V1_GetMessagesRequest, Code_Chat_V1_GetMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'advancePointer'.
  func makeAdvancePointerInterceptors() -> [ClientInterceptor<Code_Chat_V1_AdvancePointerRequest, Code_Chat_V1_AdvancePointerResponse>]

  /// - Returns: Interceptors to use when invoking 'setMuteState'.
  func makeSetMuteStateInterceptors() -> [ClientInterceptor<Code_Chat_V1_SetMuteStateRequest, Code_Chat_V1_SetMuteStateResponse>]

  /// - Returns: Interceptors to use when invoking 'setSubscriptionState'.
  func makeSetSubscriptionStateInterceptors() -> [ClientInterceptor<Code_Chat_V1_SetSubscriptionStateRequest, Code_Chat_V1_SetSubscriptionStateResponse>]

  /// - Returns: Interceptors to use when invoking 'streamChatEvents'.
  func makeStreamChatEventsInterceptors() -> [ClientInterceptor<Code_Chat_V1_StreamChatEventsRequest, Code_Chat_V1_StreamChatEventsResponse>]

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Code_Chat_V1_SendMessageRequest, Code_Chat_V1_SendMessageResponse>]
}

public enum Code_Chat_V1_ChatClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Chat",
    fullName: "code.chat.v1.Chat",
    methods: [
      Code_Chat_V1_ChatClientMetadata.Methods.getChats,
      Code_Chat_V1_ChatClientMetadata.Methods.getMessages,
      Code_Chat_V1_ChatClientMetadata.Methods.advancePointer,
      Code_Chat_V1_ChatClientMetadata.Methods.setMuteState,
      Code_Chat_V1_ChatClientMetadata.Methods.setSubscriptionState,
      Code_Chat_V1_ChatClientMetadata.Methods.streamChatEvents,
      Code_Chat_V1_ChatClientMetadata.Methods.sendMessage,
    ]
  )

  public enum Methods {
    public static let getChats = GRPCMethodDescriptor(
      name: "GetChats",
      path: "/code.chat.v1.Chat/GetChats",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/code.chat.v1.Chat/GetMessages",
      type: GRPCCallType.unary
    )

    public static let advancePointer = GRPCMethodDescriptor(
      name: "AdvancePointer",
      path: "/code.chat.v1.Chat/AdvancePointer",
      type: GRPCCallType.unary
    )

    public static let setMuteState = GRPCMethodDescriptor(
      name: "SetMuteState",
      path: "/code.chat.v1.Chat/SetMuteState",
      type: GRPCCallType.unary
    )

    public static let setSubscriptionState = GRPCMethodDescriptor(
      name: "SetSubscriptionState",
      path: "/code.chat.v1.Chat/SetSubscriptionState",
      type: GRPCCallType.unary
    )

    public static let streamChatEvents = GRPCMethodDescriptor(
      name: "StreamChatEvents",
      path: "/code.chat.v1.Chat/StreamChatEvents",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/code.chat.v1.Chat/SendMessage",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Chat_V1_ChatProvider: CallHandlerProvider {
  var interceptors: Code_Chat_V1_ChatServerInterceptorFactoryProtocol? { get }

  /// GetChats gets the set of chats for an owner account
  func getChats(request: Code_Chat_V1_GetChatsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V1_GetChatsResponse>

  /// GetMessages gets the set of messages for a chat
  func getMessages(request: Code_Chat_V1_GetMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V1_GetMessagesResponse>

  /// AdvancePointer advances a pointer in chat history
  func advancePointer(request: Code_Chat_V1_AdvancePointerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V1_AdvancePointerResponse>

  /// SetMuteState configures the mute state of a chat
  func setMuteState(request: Code_Chat_V1_SetMuteStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V1_SetMuteStateResponse>

  /// SetSubscriptionState configures the susbscription state of a chat
  func setSubscriptionState(request: Code_Chat_V1_SetSubscriptionStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V1_SetSubscriptionStateResponse>

  func streamChatEvents(context: StreamingResponseCallContext<Code_Chat_V1_StreamChatEventsResponse>) -> EventLoopFuture<(StreamEvent<Code_Chat_V1_StreamChatEventsRequest>) -> Void>

  func sendMessage(request: Code_Chat_V1_SendMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V1_SendMessageResponse>
}

extension Code_Chat_V1_ChatProvider {
  public var serviceName: Substring {
    return Code_Chat_V1_ChatServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChats":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_GetChatsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_GetChatsResponse>(),
        interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
        userFunction: self.getChats(request:context:)
      )

    case "GetMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_GetMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_GetMessagesResponse>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        userFunction: self.getMessages(request:context:)
      )

    case "AdvancePointer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_AdvancePointerRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_AdvancePointerResponse>(),
        interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? [],
        userFunction: self.advancePointer(request:context:)
      )

    case "SetMuteState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_SetMuteStateRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_SetMuteStateResponse>(),
        interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? [],
        userFunction: self.setMuteState(request:context:)
      )

    case "SetSubscriptionState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_SetSubscriptionStateRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_SetSubscriptionStateResponse>(),
        interceptors: self.interceptors?.makeSetSubscriptionStateInterceptors() ?? [],
        userFunction: self.setSubscriptionState(request:context:)
      )

    case "StreamChatEvents":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_StreamChatEventsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_StreamChatEventsResponse>(),
        interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? [],
        observerFactory: self.streamChatEvents(context:)
      )

    case "SendMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        userFunction: self.sendMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Chat_V1_ChatAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Chat_V1_ChatServerInterceptorFactoryProtocol? { get }

  /// GetChats gets the set of chats for an owner account
  @Sendable func getChats(
    request: Code_Chat_V1_GetChatsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V1_GetChatsResponse

  /// GetMessages gets the set of messages for a chat
  @Sendable func getMessages(
    request: Code_Chat_V1_GetMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V1_GetMessagesResponse

  /// AdvancePointer advances a pointer in chat history
  @Sendable func advancePointer(
    request: Code_Chat_V1_AdvancePointerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V1_AdvancePointerResponse

  /// SetMuteState configures the mute state of a chat
  @Sendable func setMuteState(
    request: Code_Chat_V1_SetMuteStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V1_SetMuteStateResponse

  /// SetSubscriptionState configures the susbscription state of a chat
  @Sendable func setSubscriptionState(
    request: Code_Chat_V1_SetSubscriptionStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V1_SetSubscriptionStateResponse

  @Sendable func streamChatEvents(
    requestStream: GRPCAsyncRequestStream<Code_Chat_V1_StreamChatEventsRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Code_Chat_V1_StreamChatEventsResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func sendMessage(
    request: Code_Chat_V1_SendMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V1_SendMessageResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Chat_V1_ChatAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Chat_V1_ChatServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Chat_V1_ChatServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Chat_V1_ChatServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChats":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_GetChatsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_GetChatsResponse>(),
        interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
        wrapping: self.getChats(request:context:)
      )

    case "GetMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_GetMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_GetMessagesResponse>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        wrapping: self.getMessages(request:context:)
      )

    case "AdvancePointer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_AdvancePointerRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_AdvancePointerResponse>(),
        interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? [],
        wrapping: self.advancePointer(request:context:)
      )

    case "SetMuteState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_SetMuteStateRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_SetMuteStateResponse>(),
        interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? [],
        wrapping: self.setMuteState(request:context:)
      )

    case "SetSubscriptionState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_SetSubscriptionStateRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_SetSubscriptionStateResponse>(),
        interceptors: self.interceptors?.makeSetSubscriptionStateInterceptors() ?? [],
        wrapping: self.setSubscriptionState(request:context:)
      )

    case "StreamChatEvents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_StreamChatEventsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_StreamChatEventsResponse>(),
        interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? [],
        wrapping: self.streamChatEvents(requestStream:responseStream:context:)
      )

    case "SendMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V1_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V1_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        wrapping: self.sendMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Code_Chat_V1_ChatServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getChats'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChatsInterceptors() -> [ServerInterceptor<Code_Chat_V1_GetChatsRequest, Code_Chat_V1_GetChatsResponse>]

  /// - Returns: Interceptors to use when handling 'getMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessagesInterceptors() -> [ServerInterceptor<Code_Chat_V1_GetMessagesRequest, Code_Chat_V1_GetMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'advancePointer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAdvancePointerInterceptors() -> [ServerInterceptor<Code_Chat_V1_AdvancePointerRequest, Code_Chat_V1_AdvancePointerResponse>]

  /// - Returns: Interceptors to use when handling 'setMuteState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetMuteStateInterceptors() -> [ServerInterceptor<Code_Chat_V1_SetMuteStateRequest, Code_Chat_V1_SetMuteStateResponse>]

  /// - Returns: Interceptors to use when handling 'setSubscriptionState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetSubscriptionStateInterceptors() -> [ServerInterceptor<Code_Chat_V1_SetSubscriptionStateRequest, Code_Chat_V1_SetSubscriptionStateResponse>]

  /// - Returns: Interceptors to use when handling 'streamChatEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamChatEventsInterceptors() -> [ServerInterceptor<Code_Chat_V1_StreamChatEventsRequest, Code_Chat_V1_StreamChatEventsResponse>]

  /// - Returns: Interceptors to use when handling 'sendMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessageInterceptors() -> [ServerInterceptor<Code_Chat_V1_SendMessageRequest, Code_Chat_V1_SendMessageResponse>]
}

public enum Code_Chat_V1_ChatServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Chat",
    fullName: "code.chat.v1.Chat",
    methods: [
      Code_Chat_V1_ChatServerMetadata.Methods.getChats,
      Code_Chat_V1_ChatServerMetadata.Methods.getMessages,
      Code_Chat_V1_ChatServerMetadata.Methods.advancePointer,
      Code_Chat_V1_ChatServerMetadata.Methods.setMuteState,
      Code_Chat_V1_ChatServerMetadata.Methods.setSubscriptionState,
      Code_Chat_V1_ChatServerMetadata.Methods.streamChatEvents,
      Code_Chat_V1_ChatServerMetadata.Methods.sendMessage,
    ]
  )

  public enum Methods {
    public static let getChats = GRPCMethodDescriptor(
      name: "GetChats",
      path: "/code.chat.v1.Chat/GetChats",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/code.chat.v1.Chat/GetMessages",
      type: GRPCCallType.unary
    )

    public static let advancePointer = GRPCMethodDescriptor(
      name: "AdvancePointer",
      path: "/code.chat.v1.Chat/AdvancePointer",
      type: GRPCCallType.unary
    )

    public static let setMuteState = GRPCMethodDescriptor(
      name: "SetMuteState",
      path: "/code.chat.v1.Chat/SetMuteState",
      type: GRPCCallType.unary
    )

    public static let setSubscriptionState = GRPCMethodDescriptor(
      name: "SetSubscriptionState",
      path: "/code.chat.v1.Chat/SetSubscriptionState",
      type: GRPCCallType.unary
    )

    public static let streamChatEvents = GRPCMethodDescriptor(
      name: "StreamChatEvents",
      path: "/code.chat.v1.Chat/StreamChatEvents",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/code.chat.v1.Chat/SendMessage",
      type: GRPCCallType.unary
    )
  }
}
