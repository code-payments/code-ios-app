//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: chat/v2/chat_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Chat_V2_ChatClient`, then call methods of this protocol to make API calls.
public protocol Code_Chat_V2_ChatClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? { get }

  func getChats(
    _ request: Code_Chat_V2_GetChatsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_GetChatsRequest, Code_Chat_V2_GetChatsResponse>

  func getMessages(
    _ request: Code_Chat_V2_GetMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_GetMessagesRequest, Code_Chat_V2_GetMessagesResponse>

  func streamChatEvents(
    callOptions: CallOptions?,
    handler: @escaping (Code_Chat_V2_StreamChatEventsResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Chat_V2_StreamChatEventsRequest, Code_Chat_V2_StreamChatEventsResponse>

  func startChat(
    _ request: Code_Chat_V2_StartChatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_StartChatRequest, Code_Chat_V2_StartChatResponse>

  func sendMessage(
    _ request: Code_Chat_V2_SendMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_SendMessageRequest, Code_Chat_V2_SendMessageResponse>

  func advancePointer(
    _ request: Code_Chat_V2_AdvancePointerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_AdvancePointerRequest, Code_Chat_V2_AdvancePointerResponse>

  func setMuteState(
    _ request: Code_Chat_V2_SetMuteStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_SetMuteStateRequest, Code_Chat_V2_SetMuteStateResponse>

  func notifyIsTyping(
    _ request: Code_Chat_V2_NotifyIsTypingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Chat_V2_NotifyIsTypingRequest, Code_Chat_V2_NotifyIsTypingResponse>
}

extension Code_Chat_V2_ChatClientProtocol {
  public var serviceName: String {
    return "code.chat.v2.Chat"
  }

  /// GetChats gets the set of chats for an owner account using a paged API.
  /// This RPC is aware of all identities tied to the owner account.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChats.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChats(
    _ request: Code_Chat_V2_GetChatsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_GetChatsRequest, Code_Chat_V2_GetChatsResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  /// GetMessages gets the set of messages for a chat member using a paged API
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMessages(
    _ request: Code_Chat_V2_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_GetMessagesRequest, Code_Chat_V2_GetMessagesResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  /// StreamChatEvents streams chat events in real-time. Chat events include
  /// messages, pointer updates, etc.
  ///
  /// The streaming protocol is follows:
  ///  1. Client initiates a stream by sending an OpenChatEventStream message.
  ///  2. If an error is encoutered, a ChatStreamEventError message will be
  ///     returned by server and the stream will be closed.
  ///  3. Server will immediately flush initial chat state.
  ///  4. New chat events will be pushed to the stream in real time as they
  ///     are received.
  ///
  /// This RPC supports a keepalive protocol as follows:
  ///   1. Client initiates a stream by sending an OpenChatEventStream message.
  ///   2. Upon stream initialization, server begins the keepalive protocol.
  ///   3. Server sends a ping to the client.
  ///   4. Client responds with a pong as fast as possible, making note of
  ///      the delay for when to expect the next ping.
  ///   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
  ///      or is deemed to be unhealthy.
  ///
  /// Client notes:
  /// * Client should be careful to process events async, so any responses to pings are
  ///   not delayed.
  /// * Clients should implement a reasonable backoff strategy upon continued timeout
  ///   failures.
  /// * Clients that abuse pong messages may have their streams terminated by server.
  ///
  /// At any point in the stream, server will respond with events in real time as
  /// they are observed. Events sent over the stream should not affect the ping/pong
  /// protocol timings.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamChatEvents(
    callOptions: CallOptions? = nil,
    handler: @escaping (Code_Chat_V2_StreamChatEventsResponse) -> Void
  ) -> BidirectionalStreamingCall<Code_Chat_V2_StreamChatEventsRequest, Code_Chat_V2_StreamChatEventsResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.streamChatEvents.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? [],
      handler: handler
    )
  }

  /// StartChat starts a chat. The RPC call is idempotent and will use existing
  /// chats whenever applicable within the context of message routing.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartChat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startChat(
    _ request: Code_Chat_V2_StartChatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_StartChatRequest, Code_Chat_V2_StartChatResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.startChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartChatInterceptors() ?? []
    )
  }

  /// SendMessage sends a message to a chat.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendMessage(
    _ request: Code_Chat_V2_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_SendMessageRequest, Code_Chat_V2_SendMessageResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  /// AdvancePointer advances a pointer in message history for a chat member.
  ///
  /// - Parameters:
  ///   - request: Request to send to AdvancePointer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func advancePointer(
    _ request: Code_Chat_V2_AdvancePointerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_AdvancePointerRequest, Code_Chat_V2_AdvancePointerResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.advancePointer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? []
    )
  }

  /// SetMuteState configures a chat member's mute state.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMuteState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setMuteState(
    _ request: Code_Chat_V2_SetMuteStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_SetMuteStateRequest, Code_Chat_V2_SetMuteStateResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.setMuteState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? []
    )
  }

  /// NotifyIsTypingRequest notifies a chat that the sending member is typing.
  ///
  /// These requests are transient, and may be dropped at any point.
  ///
  /// - Parameters:
  ///   - request: Request to send to NotifyIsTyping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func notifyIsTyping(
    _ request: Code_Chat_V2_NotifyIsTypingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Chat_V2_NotifyIsTypingRequest, Code_Chat_V2_NotifyIsTypingResponse> {
    return self.makeUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.notifyIsTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotifyIsTypingInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Code_Chat_V2_ChatClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Code_Chat_V2_ChatNIOClient")
public final class Code_Chat_V2_ChatClient: Code_Chat_V2_ChatClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.chat.v2.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Chat_V2_ChatNIOClient: Code_Chat_V2_ChatClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol?

  /// Creates a client for the code.chat.v2.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Chat_V2_ChatAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? { get }

  func makeGetChatsCall(
    _ request: Code_Chat_V2_GetChatsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_GetChatsRequest, Code_Chat_V2_GetChatsResponse>

  func makeGetMessagesCall(
    _ request: Code_Chat_V2_GetMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_GetMessagesRequest, Code_Chat_V2_GetMessagesResponse>

  func makeStreamChatEventsCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Chat_V2_StreamChatEventsRequest, Code_Chat_V2_StreamChatEventsResponse>

  func makeStartChatCall(
    _ request: Code_Chat_V2_StartChatRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_StartChatRequest, Code_Chat_V2_StartChatResponse>

  func makeSendMessageCall(
    _ request: Code_Chat_V2_SendMessageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_SendMessageRequest, Code_Chat_V2_SendMessageResponse>

  func makeAdvancePointerCall(
    _ request: Code_Chat_V2_AdvancePointerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_AdvancePointerRequest, Code_Chat_V2_AdvancePointerResponse>

  func makeSetMuteStateCall(
    _ request: Code_Chat_V2_SetMuteStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_SetMuteStateRequest, Code_Chat_V2_SetMuteStateResponse>

  func makeNotifyIsTypingCall(
    _ request: Code_Chat_V2_NotifyIsTypingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_NotifyIsTypingRequest, Code_Chat_V2_NotifyIsTypingResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Chat_V2_ChatAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Chat_V2_ChatClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetChatsCall(
    _ request: Code_Chat_V2_GetChatsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_GetChatsRequest, Code_Chat_V2_GetChatsResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  public func makeGetMessagesCall(
    _ request: Code_Chat_V2_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_GetMessagesRequest, Code_Chat_V2_GetMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  public func makeStreamChatEventsCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Code_Chat_V2_StreamChatEventsRequest, Code_Chat_V2_StreamChatEventsResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.streamChatEvents.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? []
    )
  }

  public func makeStartChatCall(
    _ request: Code_Chat_V2_StartChatRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_StartChatRequest, Code_Chat_V2_StartChatResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.startChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartChatInterceptors() ?? []
    )
  }

  public func makeSendMessageCall(
    _ request: Code_Chat_V2_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_SendMessageRequest, Code_Chat_V2_SendMessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  public func makeAdvancePointerCall(
    _ request: Code_Chat_V2_AdvancePointerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_AdvancePointerRequest, Code_Chat_V2_AdvancePointerResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.advancePointer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? []
    )
  }

  public func makeSetMuteStateCall(
    _ request: Code_Chat_V2_SetMuteStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_SetMuteStateRequest, Code_Chat_V2_SetMuteStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.setMuteState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? []
    )
  }

  public func makeNotifyIsTypingCall(
    _ request: Code_Chat_V2_NotifyIsTypingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Chat_V2_NotifyIsTypingRequest, Code_Chat_V2_NotifyIsTypingResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.notifyIsTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotifyIsTypingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Chat_V2_ChatAsyncClientProtocol {
  public func getChats(
    _ request: Code_Chat_V2_GetChatsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_GetChatsResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.getChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChatsInterceptors() ?? []
    )
  }

  public func getMessages(
    _ request: Code_Chat_V2_GetMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_GetMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.getMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? []
    )
  }

  public func streamChatEvents<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Chat_V2_StreamChatEventsResponse> where RequestStream: Sequence, RequestStream.Element == Code_Chat_V2_StreamChatEventsRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.streamChatEvents.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? []
    )
  }

  public func streamChatEvents<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Code_Chat_V2_StreamChatEventsResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Code_Chat_V2_StreamChatEventsRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.streamChatEvents.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? []
    )
  }

  public func startChat(
    _ request: Code_Chat_V2_StartChatRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_StartChatResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.startChat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartChatInterceptors() ?? []
    )
  }

  public func sendMessage(
    _ request: Code_Chat_V2_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_SendMessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  public func advancePointer(
    _ request: Code_Chat_V2_AdvancePointerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_AdvancePointerResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.advancePointer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? []
    )
  }

  public func setMuteState(
    _ request: Code_Chat_V2_SetMuteStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_SetMuteStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.setMuteState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? []
    )
  }

  public func notifyIsTyping(
    _ request: Code_Chat_V2_NotifyIsTypingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Chat_V2_NotifyIsTypingResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Chat_V2_ChatClientMetadata.Methods.notifyIsTyping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotifyIsTypingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Chat_V2_ChatAsyncClient: Code_Chat_V2_ChatAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Chat_V2_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Code_Chat_V2_ChatClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getChats'.
  func makeGetChatsInterceptors() -> [ClientInterceptor<Code_Chat_V2_GetChatsRequest, Code_Chat_V2_GetChatsResponse>]

  /// - Returns: Interceptors to use when invoking 'getMessages'.
  func makeGetMessagesInterceptors() -> [ClientInterceptor<Code_Chat_V2_GetMessagesRequest, Code_Chat_V2_GetMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'streamChatEvents'.
  func makeStreamChatEventsInterceptors() -> [ClientInterceptor<Code_Chat_V2_StreamChatEventsRequest, Code_Chat_V2_StreamChatEventsResponse>]

  /// - Returns: Interceptors to use when invoking 'startChat'.
  func makeStartChatInterceptors() -> [ClientInterceptor<Code_Chat_V2_StartChatRequest, Code_Chat_V2_StartChatResponse>]

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Code_Chat_V2_SendMessageRequest, Code_Chat_V2_SendMessageResponse>]

  /// - Returns: Interceptors to use when invoking 'advancePointer'.
  func makeAdvancePointerInterceptors() -> [ClientInterceptor<Code_Chat_V2_AdvancePointerRequest, Code_Chat_V2_AdvancePointerResponse>]

  /// - Returns: Interceptors to use when invoking 'setMuteState'.
  func makeSetMuteStateInterceptors() -> [ClientInterceptor<Code_Chat_V2_SetMuteStateRequest, Code_Chat_V2_SetMuteStateResponse>]

  /// - Returns: Interceptors to use when invoking 'notifyIsTyping'.
  func makeNotifyIsTypingInterceptors() -> [ClientInterceptor<Code_Chat_V2_NotifyIsTypingRequest, Code_Chat_V2_NotifyIsTypingResponse>]
}

public enum Code_Chat_V2_ChatClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Chat",
    fullName: "code.chat.v2.Chat",
    methods: [
      Code_Chat_V2_ChatClientMetadata.Methods.getChats,
      Code_Chat_V2_ChatClientMetadata.Methods.getMessages,
      Code_Chat_V2_ChatClientMetadata.Methods.streamChatEvents,
      Code_Chat_V2_ChatClientMetadata.Methods.startChat,
      Code_Chat_V2_ChatClientMetadata.Methods.sendMessage,
      Code_Chat_V2_ChatClientMetadata.Methods.advancePointer,
      Code_Chat_V2_ChatClientMetadata.Methods.setMuteState,
      Code_Chat_V2_ChatClientMetadata.Methods.notifyIsTyping,
    ]
  )

  public enum Methods {
    public static let getChats = GRPCMethodDescriptor(
      name: "GetChats",
      path: "/code.chat.v2.Chat/GetChats",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/code.chat.v2.Chat/GetMessages",
      type: GRPCCallType.unary
    )

    public static let streamChatEvents = GRPCMethodDescriptor(
      name: "StreamChatEvents",
      path: "/code.chat.v2.Chat/StreamChatEvents",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let startChat = GRPCMethodDescriptor(
      name: "StartChat",
      path: "/code.chat.v2.Chat/StartChat",
      type: GRPCCallType.unary
    )

    public static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/code.chat.v2.Chat/SendMessage",
      type: GRPCCallType.unary
    )

    public static let advancePointer = GRPCMethodDescriptor(
      name: "AdvancePointer",
      path: "/code.chat.v2.Chat/AdvancePointer",
      type: GRPCCallType.unary
    )

    public static let setMuteState = GRPCMethodDescriptor(
      name: "SetMuteState",
      path: "/code.chat.v2.Chat/SetMuteState",
      type: GRPCCallType.unary
    )

    public static let notifyIsTyping = GRPCMethodDescriptor(
      name: "NotifyIsTyping",
      path: "/code.chat.v2.Chat/NotifyIsTyping",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Chat_V2_ChatProvider: CallHandlerProvider {
  var interceptors: Code_Chat_V2_ChatServerInterceptorFactoryProtocol? { get }

  /// GetChats gets the set of chats for an owner account using a paged API.
  /// This RPC is aware of all identities tied to the owner account.
  func getChats(request: Code_Chat_V2_GetChatsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_GetChatsResponse>

  /// GetMessages gets the set of messages for a chat member using a paged API
  func getMessages(request: Code_Chat_V2_GetMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_GetMessagesResponse>

  /// StreamChatEvents streams chat events in real-time. Chat events include
  /// messages, pointer updates, etc.
  ///
  /// The streaming protocol is follows:
  ///  1. Client initiates a stream by sending an OpenChatEventStream message.
  ///  2. If an error is encoutered, a ChatStreamEventError message will be
  ///     returned by server and the stream will be closed.
  ///  3. Server will immediately flush initial chat state.
  ///  4. New chat events will be pushed to the stream in real time as they
  ///     are received.
  ///
  /// This RPC supports a keepalive protocol as follows:
  ///   1. Client initiates a stream by sending an OpenChatEventStream message.
  ///   2. Upon stream initialization, server begins the keepalive protocol.
  ///   3. Server sends a ping to the client.
  ///   4. Client responds with a pong as fast as possible, making note of
  ///      the delay for when to expect the next ping.
  ///   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
  ///      or is deemed to be unhealthy.
  ///
  /// Client notes:
  /// * Client should be careful to process events async, so any responses to pings are
  ///   not delayed.
  /// * Clients should implement a reasonable backoff strategy upon continued timeout
  ///   failures.
  /// * Clients that abuse pong messages may have their streams terminated by server.
  ///
  /// At any point in the stream, server will respond with events in real time as
  /// they are observed. Events sent over the stream should not affect the ping/pong
  /// protocol timings.
  func streamChatEvents(context: StreamingResponseCallContext<Code_Chat_V2_StreamChatEventsResponse>) -> EventLoopFuture<(StreamEvent<Code_Chat_V2_StreamChatEventsRequest>) -> Void>

  /// StartChat starts a chat. The RPC call is idempotent and will use existing
  /// chats whenever applicable within the context of message routing.
  func startChat(request: Code_Chat_V2_StartChatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_StartChatResponse>

  /// SendMessage sends a message to a chat.
  func sendMessage(request: Code_Chat_V2_SendMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_SendMessageResponse>

  /// AdvancePointer advances a pointer in message history for a chat member.
  func advancePointer(request: Code_Chat_V2_AdvancePointerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_AdvancePointerResponse>

  /// SetMuteState configures a chat member's mute state.
  func setMuteState(request: Code_Chat_V2_SetMuteStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_SetMuteStateResponse>

  /// NotifyIsTypingRequest notifies a chat that the sending member is typing.
  ///
  /// These requests are transient, and may be dropped at any point.
  func notifyIsTyping(request: Code_Chat_V2_NotifyIsTypingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Chat_V2_NotifyIsTypingResponse>
}

extension Code_Chat_V2_ChatProvider {
  public var serviceName: Substring {
    return Code_Chat_V2_ChatServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChats":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_GetChatsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_GetChatsResponse>(),
        interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
        userFunction: self.getChats(request:context:)
      )

    case "GetMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_GetMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_GetMessagesResponse>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        userFunction: self.getMessages(request:context:)
      )

    case "StreamChatEvents":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_StreamChatEventsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_StreamChatEventsResponse>(),
        interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? [],
        observerFactory: self.streamChatEvents(context:)
      )

    case "StartChat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_StartChatRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_StartChatResponse>(),
        interceptors: self.interceptors?.makeStartChatInterceptors() ?? [],
        userFunction: self.startChat(request:context:)
      )

    case "SendMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        userFunction: self.sendMessage(request:context:)
      )

    case "AdvancePointer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_AdvancePointerRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_AdvancePointerResponse>(),
        interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? [],
        userFunction: self.advancePointer(request:context:)
      )

    case "SetMuteState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_SetMuteStateRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_SetMuteStateResponse>(),
        interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? [],
        userFunction: self.setMuteState(request:context:)
      )

    case "NotifyIsTyping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_NotifyIsTypingRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_NotifyIsTypingResponse>(),
        interceptors: self.interceptors?.makeNotifyIsTypingInterceptors() ?? [],
        userFunction: self.notifyIsTyping(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Chat_V2_ChatAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Chat_V2_ChatServerInterceptorFactoryProtocol? { get }

  /// GetChats gets the set of chats for an owner account using a paged API.
  /// This RPC is aware of all identities tied to the owner account.
  func getChats(
    request: Code_Chat_V2_GetChatsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_GetChatsResponse

  /// GetMessages gets the set of messages for a chat member using a paged API
  func getMessages(
    request: Code_Chat_V2_GetMessagesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_GetMessagesResponse

  /// StreamChatEvents streams chat events in real-time. Chat events include
  /// messages, pointer updates, etc.
  ///
  /// The streaming protocol is follows:
  ///  1. Client initiates a stream by sending an OpenChatEventStream message.
  ///  2. If an error is encoutered, a ChatStreamEventError message will be
  ///     returned by server and the stream will be closed.
  ///  3. Server will immediately flush initial chat state.
  ///  4. New chat events will be pushed to the stream in real time as they
  ///     are received.
  ///
  /// This RPC supports a keepalive protocol as follows:
  ///   1. Client initiates a stream by sending an OpenChatEventStream message.
  ///   2. Upon stream initialization, server begins the keepalive protocol.
  ///   3. Server sends a ping to the client.
  ///   4. Client responds with a pong as fast as possible, making note of
  ///      the delay for when to expect the next ping.
  ///   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
  ///      or is deemed to be unhealthy.
  ///
  /// Client notes:
  /// * Client should be careful to process events async, so any responses to pings are
  ///   not delayed.
  /// * Clients should implement a reasonable backoff strategy upon continued timeout
  ///   failures.
  /// * Clients that abuse pong messages may have their streams terminated by server.
  ///
  /// At any point in the stream, server will respond with events in real time as
  /// they are observed. Events sent over the stream should not affect the ping/pong
  /// protocol timings.
  func streamChatEvents(
    requestStream: GRPCAsyncRequestStream<Code_Chat_V2_StreamChatEventsRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Code_Chat_V2_StreamChatEventsResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// StartChat starts a chat. The RPC call is idempotent and will use existing
  /// chats whenever applicable within the context of message routing.
  func startChat(
    request: Code_Chat_V2_StartChatRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_StartChatResponse

  /// SendMessage sends a message to a chat.
  func sendMessage(
    request: Code_Chat_V2_SendMessageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_SendMessageResponse

  /// AdvancePointer advances a pointer in message history for a chat member.
  func advancePointer(
    request: Code_Chat_V2_AdvancePointerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_AdvancePointerResponse

  /// SetMuteState configures a chat member's mute state.
  func setMuteState(
    request: Code_Chat_V2_SetMuteStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_SetMuteStateResponse

  /// NotifyIsTypingRequest notifies a chat that the sending member is typing.
  ///
  /// These requests are transient, and may be dropped at any point.
  func notifyIsTyping(
    request: Code_Chat_V2_NotifyIsTypingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Chat_V2_NotifyIsTypingResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Chat_V2_ChatAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Chat_V2_ChatServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Chat_V2_ChatServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Chat_V2_ChatServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChats":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_GetChatsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_GetChatsResponse>(),
        interceptors: self.interceptors?.makeGetChatsInterceptors() ?? [],
        wrapping: { try await self.getChats(request: $0, context: $1) }
      )

    case "GetMessages":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_GetMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_GetMessagesResponse>(),
        interceptors: self.interceptors?.makeGetMessagesInterceptors() ?? [],
        wrapping: { try await self.getMessages(request: $0, context: $1) }
      )

    case "StreamChatEvents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_StreamChatEventsRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_StreamChatEventsResponse>(),
        interceptors: self.interceptors?.makeStreamChatEventsInterceptors() ?? [],
        wrapping: { try await self.streamChatEvents(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "StartChat":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_StartChatRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_StartChatResponse>(),
        interceptors: self.interceptors?.makeStartChatInterceptors() ?? [],
        wrapping: { try await self.startChat(request: $0, context: $1) }
      )

    case "SendMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        wrapping: { try await self.sendMessage(request: $0, context: $1) }
      )

    case "AdvancePointer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_AdvancePointerRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_AdvancePointerResponse>(),
        interceptors: self.interceptors?.makeAdvancePointerInterceptors() ?? [],
        wrapping: { try await self.advancePointer(request: $0, context: $1) }
      )

    case "SetMuteState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_SetMuteStateRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_SetMuteStateResponse>(),
        interceptors: self.interceptors?.makeSetMuteStateInterceptors() ?? [],
        wrapping: { try await self.setMuteState(request: $0, context: $1) }
      )

    case "NotifyIsTyping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Chat_V2_NotifyIsTypingRequest>(),
        responseSerializer: ProtobufSerializer<Code_Chat_V2_NotifyIsTypingResponse>(),
        interceptors: self.interceptors?.makeNotifyIsTypingInterceptors() ?? [],
        wrapping: { try await self.notifyIsTyping(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Code_Chat_V2_ChatServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getChats'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChatsInterceptors() -> [ServerInterceptor<Code_Chat_V2_GetChatsRequest, Code_Chat_V2_GetChatsResponse>]

  /// - Returns: Interceptors to use when handling 'getMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMessagesInterceptors() -> [ServerInterceptor<Code_Chat_V2_GetMessagesRequest, Code_Chat_V2_GetMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'streamChatEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamChatEventsInterceptors() -> [ServerInterceptor<Code_Chat_V2_StreamChatEventsRequest, Code_Chat_V2_StreamChatEventsResponse>]

  /// - Returns: Interceptors to use when handling 'startChat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartChatInterceptors() -> [ServerInterceptor<Code_Chat_V2_StartChatRequest, Code_Chat_V2_StartChatResponse>]

  /// - Returns: Interceptors to use when handling 'sendMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessageInterceptors() -> [ServerInterceptor<Code_Chat_V2_SendMessageRequest, Code_Chat_V2_SendMessageResponse>]

  /// - Returns: Interceptors to use when handling 'advancePointer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAdvancePointerInterceptors() -> [ServerInterceptor<Code_Chat_V2_AdvancePointerRequest, Code_Chat_V2_AdvancePointerResponse>]

  /// - Returns: Interceptors to use when handling 'setMuteState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetMuteStateInterceptors() -> [ServerInterceptor<Code_Chat_V2_SetMuteStateRequest, Code_Chat_V2_SetMuteStateResponse>]

  /// - Returns: Interceptors to use when handling 'notifyIsTyping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNotifyIsTypingInterceptors() -> [ServerInterceptor<Code_Chat_V2_NotifyIsTypingRequest, Code_Chat_V2_NotifyIsTypingResponse>]
}

public enum Code_Chat_V2_ChatServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Chat",
    fullName: "code.chat.v2.Chat",
    methods: [
      Code_Chat_V2_ChatServerMetadata.Methods.getChats,
      Code_Chat_V2_ChatServerMetadata.Methods.getMessages,
      Code_Chat_V2_ChatServerMetadata.Methods.streamChatEvents,
      Code_Chat_V2_ChatServerMetadata.Methods.startChat,
      Code_Chat_V2_ChatServerMetadata.Methods.sendMessage,
      Code_Chat_V2_ChatServerMetadata.Methods.advancePointer,
      Code_Chat_V2_ChatServerMetadata.Methods.setMuteState,
      Code_Chat_V2_ChatServerMetadata.Methods.notifyIsTyping,
    ]
  )

  public enum Methods {
    public static let getChats = GRPCMethodDescriptor(
      name: "GetChats",
      path: "/code.chat.v2.Chat/GetChats",
      type: GRPCCallType.unary
    )

    public static let getMessages = GRPCMethodDescriptor(
      name: "GetMessages",
      path: "/code.chat.v2.Chat/GetMessages",
      type: GRPCCallType.unary
    )

    public static let streamChatEvents = GRPCMethodDescriptor(
      name: "StreamChatEvents",
      path: "/code.chat.v2.Chat/StreamChatEvents",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let startChat = GRPCMethodDescriptor(
      name: "StartChat",
      path: "/code.chat.v2.Chat/StartChat",
      type: GRPCCallType.unary
    )

    public static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/code.chat.v2.Chat/SendMessage",
      type: GRPCCallType.unary
    )

    public static let advancePointer = GRPCMethodDescriptor(
      name: "AdvancePointer",
      path: "/code.chat.v2.Chat/AdvancePointer",
      type: GRPCCallType.unary
    )

    public static let setMuteState = GRPCMethodDescriptor(
      name: "SetMuteState",
      path: "/code.chat.v2.Chat/SetMuteState",
      type: GRPCCallType.unary
    )

    public static let notifyIsTyping = GRPCMethodDescriptor(
      name: "NotifyIsTyping",
      path: "/code.chat.v2.Chat/NotifyIsTyping",
      type: GRPCCallType.unary
    )
  }
}
