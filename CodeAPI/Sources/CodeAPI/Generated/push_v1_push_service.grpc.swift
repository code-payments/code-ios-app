//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: push/v1/push_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Code_Push_V1_PushClient`, then call methods of this protocol to make API calls.
public protocol Code_Push_V1_PushClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? { get }

  func addToken(
    _ request: Code_Push_V1_AddTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Push_V1_AddTokenRequest, Code_Push_V1_AddTokenResponse>

  func removeToken(
    _ request: Code_Push_V1_RemoveTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Code_Push_V1_RemoveTokenRequest, Code_Push_V1_RemoveTokenResponse>
}

extension Code_Push_V1_PushClientProtocol {
  public var serviceName: String {
    return "code.push.v1.Push"
  }

  /// AddToken stores a push token in a data container. The call is idempotent
  /// and adding an existing valid token will not fail. Token types will be
  /// validated against the user agent and any mismatches will result in an
  /// INVALID_ARGUMENT status error.
  ///
  /// The token will be unlinked from any and all other accounts that it was
  /// previously bound to.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addToken(
    _ request: Code_Push_V1_AddTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Push_V1_AddTokenRequest, Code_Push_V1_AddTokenResponse> {
    return self.makeUnaryCall(
      path: Code_Push_V1_PushClientMetadata.Methods.addToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddTokenInterceptors() ?? []
    )
  }

  /// RemoveToken removes the provided push token from the account.
  ///
  /// The provided token must be bound to the current account.
  /// Otherwise, the RPC will succeed with without removal.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeToken(
    _ request: Code_Push_V1_RemoveTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Code_Push_V1_RemoveTokenRequest, Code_Push_V1_RemoveTokenResponse> {
    return self.makeUnaryCall(
      path: Code_Push_V1_PushClientMetadata.Methods.removeToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveTokenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Code_Push_V1_PushClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Code_Push_V1_PushNIOClient")
public final class Code_Push_V1_PushClient: Code_Push_V1_PushClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the code.push.v1.Push service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Code_Push_V1_PushNIOClient: Code_Push_V1_PushClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol?

  /// Creates a client for the code.push.v1.Push service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Push_V1_PushAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? { get }

  func makeAddTokenCall(
    _ request: Code_Push_V1_AddTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Push_V1_AddTokenRequest, Code_Push_V1_AddTokenResponse>

  func makeRemoveTokenCall(
    _ request: Code_Push_V1_RemoveTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Code_Push_V1_RemoveTokenRequest, Code_Push_V1_RemoveTokenResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Push_V1_PushAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Push_V1_PushClientMetadata.serviceDescriptor
  }

  public var interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAddTokenCall(
    _ request: Code_Push_V1_AddTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Push_V1_AddTokenRequest, Code_Push_V1_AddTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Push_V1_PushClientMetadata.Methods.addToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddTokenInterceptors() ?? []
    )
  }

  public func makeRemoveTokenCall(
    _ request: Code_Push_V1_RemoveTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Code_Push_V1_RemoveTokenRequest, Code_Push_V1_RemoveTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Code_Push_V1_PushClientMetadata.Methods.removeToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Push_V1_PushAsyncClientProtocol {
  public func addToken(
    _ request: Code_Push_V1_AddTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Push_V1_AddTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Push_V1_PushClientMetadata.Methods.addToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddTokenInterceptors() ?? []
    )
  }

  public func removeToken(
    _ request: Code_Push_V1_RemoveTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Code_Push_V1_RemoveTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Code_Push_V1_PushClientMetadata.Methods.removeToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Code_Push_V1_PushAsyncClient: Code_Push_V1_PushAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Code_Push_V1_PushClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Code_Push_V1_PushClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addToken'.
  func makeAddTokenInterceptors() -> [ClientInterceptor<Code_Push_V1_AddTokenRequest, Code_Push_V1_AddTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'removeToken'.
  func makeRemoveTokenInterceptors() -> [ClientInterceptor<Code_Push_V1_RemoveTokenRequest, Code_Push_V1_RemoveTokenResponse>]
}

public enum Code_Push_V1_PushClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Push",
    fullName: "code.push.v1.Push",
    methods: [
      Code_Push_V1_PushClientMetadata.Methods.addToken,
      Code_Push_V1_PushClientMetadata.Methods.removeToken,
    ]
  )

  public enum Methods {
    public static let addToken = GRPCMethodDescriptor(
      name: "AddToken",
      path: "/code.push.v1.Push/AddToken",
      type: GRPCCallType.unary
    )

    public static let removeToken = GRPCMethodDescriptor(
      name: "RemoveToken",
      path: "/code.push.v1.Push/RemoveToken",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Code_Push_V1_PushProvider: CallHandlerProvider {
  var interceptors: Code_Push_V1_PushServerInterceptorFactoryProtocol? { get }

  /// AddToken stores a push token in a data container. The call is idempotent
  /// and adding an existing valid token will not fail. Token types will be
  /// validated against the user agent and any mismatches will result in an
  /// INVALID_ARGUMENT status error.
  ///
  /// The token will be unlinked from any and all other accounts that it was
  /// previously bound to.
  func addToken(request: Code_Push_V1_AddTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Push_V1_AddTokenResponse>

  /// RemoveToken removes the provided push token from the account.
  ///
  /// The provided token must be bound to the current account.
  /// Otherwise, the RPC will succeed with without removal.
  func removeToken(request: Code_Push_V1_RemoveTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Code_Push_V1_RemoveTokenResponse>
}

extension Code_Push_V1_PushProvider {
  public var serviceName: Substring {
    return Code_Push_V1_PushServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Push_V1_AddTokenRequest>(),
        responseSerializer: ProtobufSerializer<Code_Push_V1_AddTokenResponse>(),
        interceptors: self.interceptors?.makeAddTokenInterceptors() ?? [],
        userFunction: self.addToken(request:context:)
      )

    case "RemoveToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Push_V1_RemoveTokenRequest>(),
        responseSerializer: ProtobufSerializer<Code_Push_V1_RemoveTokenResponse>(),
        interceptors: self.interceptors?.makeRemoveTokenInterceptors() ?? [],
        userFunction: self.removeToken(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Code_Push_V1_PushAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Code_Push_V1_PushServerInterceptorFactoryProtocol? { get }

  /// AddToken stores a push token in a data container. The call is idempotent
  /// and adding an existing valid token will not fail. Token types will be
  /// validated against the user agent and any mismatches will result in an
  /// INVALID_ARGUMENT status error.
  ///
  /// The token will be unlinked from any and all other accounts that it was
  /// previously bound to.
  func addToken(
    request: Code_Push_V1_AddTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Push_V1_AddTokenResponse

  /// RemoveToken removes the provided push token from the account.
  ///
  /// The provided token must be bound to the current account.
  /// Otherwise, the RPC will succeed with without removal.
  func removeToken(
    request: Code_Push_V1_RemoveTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Code_Push_V1_RemoveTokenResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Code_Push_V1_PushAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Code_Push_V1_PushServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Code_Push_V1_PushServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Code_Push_V1_PushServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Push_V1_AddTokenRequest>(),
        responseSerializer: ProtobufSerializer<Code_Push_V1_AddTokenResponse>(),
        interceptors: self.interceptors?.makeAddTokenInterceptors() ?? [],
        wrapping: { try await self.addToken(request: $0, context: $1) }
      )

    case "RemoveToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Code_Push_V1_RemoveTokenRequest>(),
        responseSerializer: ProtobufSerializer<Code_Push_V1_RemoveTokenResponse>(),
        interceptors: self.interceptors?.makeRemoveTokenInterceptors() ?? [],
        wrapping: { try await self.removeToken(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Code_Push_V1_PushServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'addToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddTokenInterceptors() -> [ServerInterceptor<Code_Push_V1_AddTokenRequest, Code_Push_V1_AddTokenResponse>]

  /// - Returns: Interceptors to use when handling 'removeToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveTokenInterceptors() -> [ServerInterceptor<Code_Push_V1_RemoveTokenRequest, Code_Push_V1_RemoveTokenResponse>]
}

public enum Code_Push_V1_PushServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Push",
    fullName: "code.push.v1.Push",
    methods: [
      Code_Push_V1_PushServerMetadata.Methods.addToken,
      Code_Push_V1_PushServerMetadata.Methods.removeToken,
    ]
  )

  public enum Methods {
    public static let addToken = GRPCMethodDescriptor(
      name: "AddToken",
      path: "/code.push.v1.Push/AddToken",
      type: GRPCCallType.unary
    )

    public static let removeToken = GRPCMethodDescriptor(
      name: "RemoveToken",
      path: "/code.push.v1.Push/RemoveToken",
      type: GRPCCallType.unary
    )
  }
}
