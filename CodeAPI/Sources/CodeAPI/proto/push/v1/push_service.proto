syntax = "proto3";

package code.push.v1;

option go_package = "github.com/code-wallet/code-api/genproto/push/v1;push";
option java_package = "com.codeinc.gen.push.v1";
option objc_class_prefix = "APBPushV1";

import "common/v1/model.proto";
import "validate/validate.proto";

service Push {
    // AddToken stores a push token in a data container. The call is idempotent
    // and adding an existing valid token will not fail. Token types will be
    // validated against the user agent and any mismatches will result in an
    // INVALID_ARGUMENT status error.
    rpc AddToken(AddTokenRequest) returns (AddTokenResponse);
}

enum TokenType {
    UNKNOWN = 0;
    // FCM registration token for an Android device
    FCM_ANDROID = 1;
    // FCM registration token or an iOS device
    FCM_APNS = 2;
}

message AddTokenRequest {
    // The public key of the owner account that signed this request message.
    common.v1.SolanaAccountId owner_account_id = 1 [(validate.rules).message.required = true];

    // The signature is of serialize(AddTokenRequest) without this field set
    // using the private key of owner_account_id. This provides an authentication
    // mechanism to the RPC.
    common.v1.Signature signature = 2 [(validate.rules).message.required = true];

    // The data container where the push token will be stored.
    common.v1.DataContainerId container_id = 3 [(validate.rules).message.required = true];

    // The push token to store
    string push_token = 4 [(validate.rules).string = {
        min_len: 1
        max_len: 4096 // todo: What's a reasonable size
    }];

    // The type of push token
    TokenType token_type = 5 [(validate.rules).enum = {in: [1,2]}];

    // The instance of the app install where the push token was generated. Ideally,
    // the push token is unique to the install.
    common.v1.AppInstallId app_install = 6;
}

message AddTokenResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // The push token is invalid and wasn't stored.
        INVALID_PUSH_TOKEN = 1;
    }
}
