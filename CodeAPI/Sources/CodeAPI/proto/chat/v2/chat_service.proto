syntax = "proto3";

package code.chat.v2;

option go_package = "github.com/code-payments/code-protobuf-api/generated/go/chat/v2;chat";
option java_package = "com.codeinc.gen.chat.v2";
option objc_class_prefix = "CPBChatV2";

import "common/v1/model.proto";
import "transaction/v2/transaction_service.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service Chat {
    // GetChats gets the set of chats for an owner account using a paged API.
    // This RPC is aware of all identities tied to the owner account.
    rpc GetChats(GetChatsRequest) returns (GetChatsResponse);

    // GetMessages gets the set of messages for a chat member using a paged API
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);

    // StreamChatEvents streams chat events in real-time. Chat events include
    // messages, pointer updates, etc.
    //
    // The streaming protocol is follows:
    //  1. Client initiates a stream by sending an OpenChatEventStream message.
    //  2. If an error is encoutered, a ChatStreamEventError message will be
    //     returned by server and the stream will be closed.
    //  3. Server will immediately flush initial chat state.
    //  4. New chat events will be pushed to the stream in real time as they
    //     are received.
    //
    // This RPC supports a keepalive protocol as follows:
    //   1. Client initiates a stream by sending an OpenChatEventStream message.
    //   2. Upon stream initialization, server begins the keepalive protocol.
    //   3. Server sends a ping to the client.
    //   4. Client responds with a pong as fast as possible, making note of
    //      the delay for when to expect the next ping.
    //   5. Steps 3 and 4 are repeated until the stream is explicitly terminated
    //      or is deemed to be unhealthy.
    //
    // Client notes:
    // * Client should be careful to process events async, so any responses to pings are
    //   not delayed.
    // * Clients should implement a reasonable backoff strategy upon continued timeout
    //   failures.
    // * Clients that abuse pong messages may have their streams terminated by server.
    //
    // At any point in the stream, server will respond with events in real time as
    // they are observed. Events sent over the stream should not affect the ping/pong
    // protocol timings.
    rpc StreamChatEvents(stream StreamChatEventsRequest) returns (stream StreamChatEventsResponse);

    // StartChat starts a chat. The RPC call is idempotent and will use existing
    // chats whenever applicable within the context of message routing.
    rpc StartChat(StartChatRequest) returns (StartChatResponse);

    // SendMessage sends a message to a chat.
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

    // AdvancePointer advances a pointer in message history for a chat member.
    rpc AdvancePointer(AdvancePointerRequest) returns (AdvancePointerResponse);

    // SetMuteState configures a chat member's mute state.
    rpc SetMuteState(SetMuteStateRequest) returns (SetMuteStateResponse);

    // NotifyIsTypingRequest notifies a chat that the sending member is typing.
    //
    // These requests are transient, and may be dropped at any point.
    rpc NotifyIsTyping(NotifyIsTypingRequest) returns (NotifyIsTypingResponse);
}

message GetChatsRequest {
    common.v1.SolanaAccountId owner = 1 [(validate.rules).message.required = true];

    common.v1.Signature signature = 2 [(validate.rules).message.required = true];

    uint32 page_size = 3 [(validate.rules).uint32.lte = 100];

    Cursor cursor = 4;

    Direction direction = 5;
    enum Direction {
        ASC  = 0;
        DESC = 1;
    }
}

message GetChatsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }

    repeated Metadata chats = 2 [(validate.rules).repeated = {
        min_items: 0
        max_items: 100
    }];
}

message GetMessagesRequest {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    common.v1.SolanaAccountId owner = 2 [(validate.rules).message.required = true];

    common.v1.Signature signature = 3 [(validate.rules).message.required = true];

    uint32 page_size = 4 [(validate.rules).uint32.lte = 100];

    Cursor cursor = 5;

    Direction direction = 6;
    enum Direction {
        ASC  = 0;
        DESC = 1;
    }
}

message GetMessagesResponse {
    Result result = 1;
    enum Result {
        OK     = 0;
        DENIED = 1;
    }

    repeated Message messages = 2 [(validate.rules).repeated = {
        min_items: 0
        max_items: 100
    }];
}

message OpenChatEventStream {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    common.v1.SolanaAccountId owner = 2 [(validate.rules).message.required = true];

    common.v1.Signature signature = 3 [(validate.rules).message.required = true];
}

message ChatStreamEvent {
    oneof type {
        option (validate.required) = true;

        Message message = 1;
        Pointer     pointer = 2;
        IsTyping    is_typing = 3;
    }
}

message ChatStreamEventBatch {
    repeated ChatStreamEvent events = 2 [(validate.rules).repeated = {
        min_items: 1
        max_items: 1024
    }];
}

message ChatStreamEventError {
    Code code = 1;
    enum Code {
        DENIED = 0;
    }
}

message StreamChatEventsRequest {
    oneof type {
        option (validate.required) = true;

        OpenChatEventStream  open_stream = 1;
        common.v1.ClientPong pong        = 2;
    }
}

message StreamChatEventsResponse {
    oneof type {
        option (validate.required) = true;

        ChatStreamEventBatch events = 1;
        common.v1.ServerPing ping   = 2;
        ChatStreamEventError error  = 3;
    }
}

message StartChatRequest {
    common.v1.SolanaAccountId owner = 1 [(validate.rules).message.required = true];

    common.v1.Signature signature = 2 [(validate.rules).message.required = true];

    oneof parameters {
        option (validate.required) = true;

        StartTwoWayChatParameters two_way_chat = 3;
    }
}

// StartTwoWayChatParameters contains the parameters required to start
// or recover a two way chat between the caller and the specified 'other_user'.
//
// The 'other_user' is currently the 'tip_address', normally retrieved from
// user.Identity.GetTwitterUser(username).
message StartTwoWayChatParameters {
    // The account id of the user the caller wishes to chat with.
    //
    // This will be the `tip` (or equivalent) address.
    common.v1.SolanaAccountId other_user = 1 [(validate.rules).message.required = true];

    // The intent_id of the payment that initiated the chat/friendship.
    //
    // This field is optional. It is used as an optimization when the server has not
    // yet observed the establishment of a friendship. In this case, the server will
    // use the provided intent_id to verify the friendship.
    //
    // This is most likely to occur when initiating a chat with a user for the first
    // time.
    common.v1.IntentId intent_id = 2;
}

message StartChatResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // DENIED indicates the caller is not allowed to start/join the chat.
        DENIED = 1;

        // INVALID_PRAMETER indicates one of the parameters is invalid.
        INVALID_PARAMETER = 2;

        // PENDING indicates that the payment (for chat) intent is pending confirmation
        // before the service will permit the creation of the chat. This can happen in
        // cases where the block chain is particularly slow (beyond our RPC timeouts).
        PENDING = 3;

        // MISSING_IDENTITY indicates that there is no identity for the user (creator).
        MISSING_IDENTITY = 4;

        // USER_NOT_FOUND indicates that (one of) the target user's was not found.
        USER_NOT_FOUND = 5;
    }

    // The chat to use if the RPC was successful.
    Metadata chat = 2;
}

message SendMessageRequest {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    // Allowed content types that can be sent by client:
    //  - TextContent
    //  - ThankYouContent
    repeated Content content = 2 [(validate.rules).repeated = {
        min_items: 1
        max_items: 1
    }];

    common.v1.SolanaAccountId owner = 3 [(validate.rules).message.required = true];

    common.v1.Signature signature = 4 [(validate.rules).message.required = true];
}

message SendMessageResponse {
    Result result = 1;
    enum Result {
        OK                   = 0;
        DENIED               = 1;
        INVALID_CONTENT_TYPE = 2;
    }

    // The chat message that was sent if the RPC was succesful, which includes
    // server-side metadata like the generated message ID and official timestamp
    Message message = 2;
}

message AdvancePointerRequest {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    Pointer pointer = 2 [(validate.rules).message.required = true];

    common.v1.SolanaAccountId owner = 3 [(validate.rules).message.required = true];

    common.v1.Signature signature = 4 [(validate.rules).message.required = true];
}

message AdvancePointerResponse {
    Result result = 1;
    enum Result {
        OK                = 0;
        DENIED            = 1;
        MESSAGE_NOT_FOUND = 2;
    }
}

message SetMuteStateRequest {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    bool is_muted = 2;

    common.v1.SolanaAccountId owner = 3 [(validate.rules).message.required = true];

    common.v1.Signature signature = 4 [(validate.rules).message.required = true];
}

message SetMuteStateResponse {
    Result result = 1;
    enum Result {
        OK             = 0;
        DENIED         = 1;
        CANT_MUTE      = 2;
    }
}

message NotifyIsTypingRequest {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    bool is_typing = 2;

    common.v1.SolanaAccountId owner = 3 [(validate.rules).message.required = true];

    common.v1.Signature signature = 4 [(validate.rules).message.required = true];
}

message NotifyIsTypingResponse {
    Result result = 1;
    enum Result {
        OK             = 0;
        DENIED         = 1;
    }
}

message MessageId {
    // A lexicographically sortable ID that can be used to sort source of
    // chat history.
    bytes value = 1 [(validate.rules).bytes = {
        min_len: 16
        max_len: 16
    }];
}

message MemberId {
    // The publically available 'deposit' address of the user.
    bytes value = 1 [(validate.rules).bytes = {
        min_len: 32
        max_len: 32
    }];
}

enum ChatType {
    UNKNOWN_CHAT_TYPE = 0;
    TWO_WAY           = 1;
    // GROUP             = 3;
}

enum Platform {
    UNKNOWN_PLATFORM = 0;
    TWITTER          = 1;
}

enum PointerType {
    UNKNOWN_POINTER_TYPE = 0;
    SENT                 = 1; // Always inferred by OK result in SendMessageResponse or message presence in a chat
    DELIVERED            = 2;
    READ                 = 3;
}

// A chat
//
// todo: Support is_verified in a clean way
message Metadata {
    common.v1.ChatId chat_id = 1 [(validate.rules).message.required = true];

    // The type of chat
    ChatType type = 2 [(validate.rules).enum = {
        not_in: [0] // UNKNOWN_CHAT_TYPE
    }];

    // Cursor value for this chat for reference in subsequent GetChatsRequest
    Cursor cursor = 3;

    // The chat title, which is _only_ set by server if an explicit title
    // was set. Otherwise, clients should fill in an appropriate chat title.
    string title = 4 [(validate.rules).string = {
        min_len: 0
        max_len: 1024
    }];

    // The members in this chat.
    repeated Member members = 5 [(validate.rules).repeated = {
        min_items: 1
        max_items: 2
    }];

    // Whether or not the chat is muted (from the perspective of the caller).
    bool is_muted = 6;

    // Whether or not the chat is mutable (from the persective of the caller).
    bool muteable = 7;

    // Number of (estimated) unread message (from the perspective of the caller).
    uint32 num_unread = 8;
}

// A message in a chat
message Message {
    // Globally unique ID for this message
    MessageId message_id = 1 [(validate.rules).message.required = true];

    // The chat member that sent the message. For NOTIFICATION chats, this field
    // is omitted since the chat has exactly 1 member.
    MemberId sender_id = 2;

    // Ordered message content. A message may have more than one piece of content.
    repeated Content content = 3 [(validate.rules).repeated = {
        min_items: 1
        max_items: 2
    }];

    // Timestamp this message was generated at. This value is also encoded in
    // any time-based UUID message IDs.
    google.protobuf.Timestamp ts = 4 [(validate.rules).timestamp.required = true];

    // Cursor value for this message for reference in a paged GetMessagesRequest
    Cursor cursor = 5;
}

// A user in a chat
message Member {
    // Public AccountId (for is self...is derived via deposit address)
    MemberId member_id = 1 [(validate.rules).message.required = true];

    // The chat member's identity if it has been revealed.
    //
    // Multiple identities here? Well really only needs twitter/other handles
    // Repeated PlatformHandles (where code doesn't matter)?
    MemberIdentity identity = 2;

    // Chat message state for this member.
    //
    // If set, the list may contain DELIVERED and READ pointers. SENT pointers
    // are only shared between the sender and server, to indicate persistence.
    //
    // The server may wish to omit all pointers in various types of group chats
    // or as relief valves.
    repeated Pointer pointers = 3 [(validate.rules).repeated = {
        min_items: 0
        max_items: 2
    }];

    // If the member is the caller (where applicable), will be set to true.
    bool is_self = 4;
}

// Identity to an external social platform that can be linked to a Code account
message MemberIdentity {
    // The external social platform linked to this chat member
    Platform platform = 1 [(validate.rules).enum = {
        in: [1] // TWITTER
    }];

    // The chat member's username on the external social platform.
    string username = 2 [(validate.rules).string = {
        min_len: 1
        max_len: 15 // Twitter limit
    }];

    // TODO: If we need the profile pic, we need display name...both can maybe be removed?

    // If present, the display name of the user.
    string display_name = 3 [(validate.rules).string = {
        max_len: 255 // Arbitrary limit
    }];

    // If present, the URL of the users profile pic.
    string profile_pic_url = 4 [(validate.rules).string = {
        max_len: 255 // Arbitrary limit
    }];
}

// Pointer in a chat indicating a user's message history state in a chat.
message Pointer {
    // The type of pointer indicates which user's message history state can be
    // inferred from the pointer value. It is also possible to infer cross-pointer
    // state. For example, if a chat member has a READ pointer for a message with
    // ID N, then the DELIVERED pointer must be at least N.
    PointerType type = 1 [(validate.rules).enum = {
        not_in: [0] // UNKNOWN_POINTER_TYPE
    }];

    // Everything at or before this message ID is considered to have the state
    // inferred by the type of pointer.
    MessageId value = 2 [(validate.rules).message.required = true];

    // The chat member associated with this pointer state
    MemberId member_id = 3 [(validate.rules).message.required = true];
}

// Content for a chat message
message Content {
    oneof type {
        option (validate.required) = true;

        TextContent             text              = 1;
        LocalizedContent        localized         = 2;
        ExchangeDataContent     exchange_data     = 3;
        NaclBoxEncryptedContent nacl_box          = 4;
    }
}

// Raw text content
message TextContent {
    string text = 1 [(validate.rules).string = {
        min_len: 1
        max_len: 1024
    }];
}

// Text content that is either a localization key that should be translated on
// client, or a server-side translated piece of text.
message LocalizedContent {
    string key_or_text = 1 [(validate.rules).string = {
        min_len: 1
        max_len: 1024
    }];
}

// Exchange data content for movement of a value of Kin
message ExchangeDataContent {
    enum Verb {
        UNKNOWN      = 0;
        GAVE         = 1;
        RECEIVED     = 2;
        WITHDREW     = 3;
        DEPOSITED    = 4;
        SENT         = 5;
        RETURNED     = 6;
        SPENT        = 7;
        PAID         = 8;
        PURCHASED    = 9;
        RECEIVED_TIP = 10;
        SENT_TIP     = 11;
    }

    // Verb describing how the amount of Kin was exchanged
    //
    // Note: The current definition is not suitable outside a NOTIFICATION chat
    //       as not enough context is provided as to which member this verb is
    //       associated with.
    Verb verb = 1 [(validate.rules).enum = {
        not_in: [0] // UNKNOWN
    }];

    // An amount of Kin being exchanged
    oneof exchange_data {
        option (validate.required) = true;

        transaction.v2.ExchangeData            exact   = 2;
        transaction.v2.ExchangeDataWithoutRate partial = 3;
    }

    // An ID that can be referenced to the source of the exchange of Kin
    oneof reference {
        option (validate.required) = true;

        common.v1.IntentId  intent    = 4;
        common.v1.Signature signature = 5;
    }

    // TODO: We need to be able to provide the parties involved, such that
    // such that client can render it correctly.
}

// Encrypted piece of content using NaCl box encryption
message NaclBoxEncryptedContent {
    // The sender's public key that is used to derive the shared private key for
    // decryption for message content.
    common.v1.SolanaAccountId peer_public_key = 1 [(validate.rules).message.required = true];

    // Globally random nonce that is unique to this encrypted piece of content
    bytes nonce = 2 [(validate.rules).bytes = {
        min_len: 24
        max_len: 24
    }];

    // The encrypted piece of message content
    bytes encrypted_payload = 3 [(validate.rules).bytes = {
        min_len: 1
        max_len: 1024
    }];
}

// Opaque cursor used across paged APIs. Underlying bytes may change as paging
// strategies evolve. Expected length value will vary based on the RPC being
// executed.
message Cursor {
    bytes value = 1 [(validate.rules).bytes = {
        min_len: 8
        max_len: 32
    }];
}

message IsTyping {
    MemberId member_id = 1 [(validate.rules).message.required = true];

    // is_typing indicates whether or not the user is typing.
    // If false, the user has explicitly stopped typing.
    bool is_typing = 2;
}
