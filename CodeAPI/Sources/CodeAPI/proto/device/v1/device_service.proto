syntax = "proto3";

package code.device.v1;

option go_package = "github.com/code-wallet/code-api/genproto/device/v1;device";
option java_package = "com.codeinc.gen.device.v1";
option objc_class_prefix = "CPBDevicetV1";

import "common/v1/model.proto";
import "validate/validate.proto";

service Device {
    // RegisterLoggedInAccounts registers a set of owner accounts logged for
    // an app install. Currently, a single login is enforced per app install.
    // After using GetLoggedInAccounts to detect stale logins, clients can use
    // this RPC to update the set of accounts with valid login sessions.
    rpc RegisterLoggedInAccounts(RegisterLoggedInAccountsRequest) returns (RegisterLoggedInAccountsResponse);

    // GetLoggedInAccounts gets the set of logged in accounts for an app install.
    // Clients can use this RPC to detect stale logins for boot out of the app.
    rpc GetLoggedInAccounts(GetLoggedInAccountsRequest) returns (GetLoggedInAccountsResponse);
}

message RegisterLoggedInAccountsRequest {
    common.v1.AppInstallId app_install = 1 [(validate.rules).message.required = true];

    // The set of owners logged into the app install. Setting an empty value
    // indicates there are no logged in users. We allow for more than one owner
    // in the spec with a repeated field to be flexible in the future.
    repeated common.v1.SolanaAccountId owners = 2 [(validate.rules).repeated = {
        min_items: 0
        max_items: 1
    }];

    // Signature values must appear in the exact order their respecitive signing
    // owner account appears in the owners field. All signatures should be generated
    // without any other signature values set.
    repeated common.v1.Signature signatures = 3 [(validate.rules).repeated = {
        min_items: 0
        max_items: 1
    }];
}

message RegisterLoggedInAccountsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        INVALID_OWNER = 1;
    }

    // Set of invalid owner accounts detected in the request. An owner account
    // can be invalid for several reasons: not phone verified, timelock account
    // unlocked, etc. Value is set when result is INVALID_OWNER.
    repeated common.v1.SolanaAccountId invalid_owners = 2 [(validate.rules).repeated = {
        min_items: 0
        max_items: 1
    }];
}

message GetLoggedInAccountsRequest {
    common.v1.AppInstallId app_install = 1 [(validate.rules).message.required = true];
}

message GetLoggedInAccountsResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }

    repeated common.v1.SolanaAccountId owners = 2 [(validate.rules).repeated = {
        min_items: 0
        max_items: 1
    }];
}
