syntax = "proto3";

package code.invite.v2;

option go_package = "github.com/code-payments/code-protobuf-api/generated/go/invite/v2;invite";
option java_package = "com.codeinc.gen.invite.v2";
option objc_class_prefix = "CPBInviteV2";

import "common/v1/model.proto";
import "validate/validate.proto";

service Invite {
    // GetInviteCount gets the number of invites that a user can send out.
    rpc GetInviteCount(GetInviteCountRequest) returns (GetInviteCountResponse);

    // InvitePhoneNumber invites someone to join via their phone number. A phone number
    // can only be invited once by a unique user or invite code. This is to avoid having
    // a phone number consuming more than one invite count globally.
    rpc InvitePhoneNumber(InvitePhoneNumberRequest) returns (InvitePhoneNumberResponse);

    // GetInvitationStatus gets a phone number's invitation status.
    rpc GetInvitationStatus(GetInvitationStatusRequest) returns (GetInvitationStatusResponse);
}

message GetInviteCountRequest {
    // The user to query for their invite count
    common.v1.UserId user_id = 1 [(validate.rules).message.required = true];
}

message GetInviteCountResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }

    // The number of invites the user is allowed to issue.
    uint32 invite_count = 2;
}

message InvitePhoneNumberRequest {
    // The source for the invite. One of these values must be present
    oneof source {
        common.v1.UserId user = 1;
        InviteCode invite_code = 3;
    }

    // The phone number receiving the invite.
    common.v1.PhoneNumber receiver = 2 [(validate.rules).message.required = true];
}

message InvitePhoneNumberResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        // The source exceeded their invite count and is restricted from issuing
        // further invites.
        INVITE_COUNT_EXCEEDED = 1;
        // The receiver phone number has already been invited. Regardless of who
        // invited it, the source's invite count is not decremented when this is
        // returned.
        ALREADY_INVITED = 2;
        // The source  user has not been invited.
        USER_NOT_INVITED = 3;
        // The receiver phone number failed validation.
        INVALID_RECEIVER_PHONE_NUMBER = 4;
        // The invite code doesn't exist.
        INVITE_CODE_NOT_FOUND = 5;
        // The invite code has been revoked.
        INVITE_CODE_REVOKED = 6;
        // The invite code has expired.
        INVITE_CODE_EXPIRED = 7;
    }
}

message GetInvitationStatusRequest {
    // The user being queried for their invitation status.
    common.v1.UserId user_id = 1 [(validate.rules).message.required = true];
}

message GetInvitationStatusResponse {
    Result result = 1;
    enum Result {
        OK = 0;
    }

    // The user's invitation status
    InvitationStatus status = 2;
}

message InviteCode {
    // Regex for invite codes
    string value = 1 [(validate.rules).string = {
        pattern: "^[A-z0-9]{3,32}$",
        min_len: 3,
        max_len: 32,
    }];
}

message PageToken {
    bytes value = 1 [(validate.rules).bytes = {
        min_len: 1
        max_len: 128
    }];
}

enum InvitationStatus {
    // The phone number has never been invited.
    NOT_INVITED = 0;
    // The phone number has been invited at least once.
    INVITED = 1;
    // The phone number has been invited and used the app at least once via a
    // phone verified account creation or login.
    REGISTERED = 2;
    // The phone number was invited, but revoked at a later time.
    REVOKED = 3;
}
